package dbfConverter;

import java.util.HashSet;
import java.util.Set;
import java.io.*;

/** класс, который служит для обработки переменных с зарезервированными словами */
public class SqlKeyWords {
	private static Set<String> sqlWords=new HashSet<String>();

	public static boolean isSqlKeywords(String value){
		return sqlWords.contains(value.trim().toUpperCase());
	}
	
	static{
		sqlWords.add("ACTIVE");
		sqlWords.add("ADD");
		sqlWords.add("ALL");
		sqlWords.add("AFTER");
		sqlWords.add("ALTER");
		sqlWords.add("AND");
		sqlWords.add("ANY");
		sqlWords.add("AS");
		sqlWords.add("ASC");
		sqlWords.add("ASCENDING");
		sqlWords.add("AT");
		sqlWords.add("AUTO");
		sqlWords.add("AUTOINC");
		sqlWords.add("AVG");
		sqlWords.add("BASE_NAME");
		sqlWords.add("BEFORE");
		sqlWords.add("BEGIN");
		sqlWords.add("BETWEEN");
		sqlWords.add("BLOB");
		sqlWords.add("BOOLEAN");
		sqlWords.add("BOTH");
		sqlWords.add("BY");
		sqlWords.add("BYTES");
		sqlWords.add("CACHE");
		sqlWords.add("CAST");
		sqlWords.add("CHAR");
		sqlWords.add("CHARACTER");
		sqlWords.add("CHECK");
		sqlWords.add("CHECK_POINT_LENGTH");
		sqlWords.add("COLLATE");
		sqlWords.add("COLUMN");
		sqlWords.add("COMMIT");
		sqlWords.add("COMMITTED");
		sqlWords.add("COMPUTED");
		sqlWords.add("CONDITIONAL");
		sqlWords.add("CONSTRAINT");
		sqlWords.add("CONTAINING");
		sqlWords.add("COUNT");
		sqlWords.add("CREATE");
		sqlWords.add("CSTRING");
		sqlWords.add("CURRENT");
		sqlWords.add("CURSOR");
		sqlWords.add("DATABASE");
		sqlWords.add("DATE");
		sqlWords.add("DAY");
		sqlWords.add("DEBUG");
		sqlWords.add("DEC");
		sqlWords.add("DECIMAL");
		sqlWords.add("DECLARE");
		sqlWords.add("DEFAULT");
		sqlWords.add("DELETE");
		sqlWords.add("DESC");
		sqlWords.add("DESCENDING");
		sqlWords.add("DISTINCT");
		sqlWords.add("DO");
		sqlWords.add("DOMAIN");
		sqlWords.add("DOUBLE");
		sqlWords.add("DROP");
		sqlWords.add("ELSE");
		sqlWords.add("END");
		sqlWords.add("ENTRY_POINT");
		sqlWords.add("ESCAPE");
		sqlWords.add("EXCEPTION");
		sqlWords.add("EXECUTE");
		sqlWords.add("EXISTS");
		sqlWords.add("EXIT");
		sqlWords.add("EXTERNAL");
		sqlWords.add("EXTRACT");
		sqlWords.add("FILE");
		sqlWords.add("FILTER");
		sqlWords.add("FLOAT");
		sqlWords.add("FOR");
		sqlWords.add("FOREIGN");
		sqlWords.add("FROM");
		sqlWords.add("FULL");
		sqlWords.add("FUNCTION");
		sqlWords.add("GDSCODE");
		sqlWords.add("GENERATOR");
		sqlWords.add("GEN_ID");
		sqlWords.add("GRANT");
		sqlWords.add("GROUP");
		sqlWords.add("GROUP_COMMIT_WAIT_TIME");
		sqlWords.add("HAVING");
		sqlWords.add("HOUR");
		sqlWords.add("IF");
		sqlWords.add("IN");
		sqlWords.add("INT");
		sqlWords.add("INACTIVE");
		sqlWords.add("INDEX");
		sqlWords.add("INNER");
		sqlWords.add("INPUT_TYPE");
		sqlWords.add("INSERT");
		sqlWords.add("INTEGER");
		sqlWords.add("INTO");
		sqlWords.add("IS");
		sqlWords.add("ISOLATION");
		sqlWords.add("JOIN");
		sqlWords.add("KEY");
		sqlWords.add("LONG");
		sqlWords.add("LENGTH");
		sqlWords.add("LOGFILE");
		sqlWords.add("LOWER");
		sqlWords.add("LEADING");
		sqlWords.add("LEFT");
		sqlWords.add("LEVEL");
		sqlWords.add("LIKE");
		sqlWords.add("LOG_BUFFER_SIZE");
		sqlWords.add("MANUAL");
		sqlWords.add("MAX");
		sqlWords.add("MAXIMUM_SEGMENT");
		sqlWords.add("MERGE");
		sqlWords.add("MESSAGE");
		sqlWords.add("MIN");
		sqlWords.add("MINUTE");
		sqlWords.add("MODULE_NAME");
		sqlWords.add("MONEY");
		sqlWords.add("MONTH");
		sqlWords.add("NAMES");
		sqlWords.add("NATIONAL");
		sqlWords.add("NATURAL");
		sqlWords.add("NCHAR");
		sqlWords.add("NO");
		sqlWords.add("NOT");
		sqlWords.add("NULL");
		sqlWords.add("NUM_LOG_BUFFERS");
		sqlWords.add("NUMERIC");
		sqlWords.add("OF");
		sqlWords.add("ON");
		sqlWords.add("ONLY");
		sqlWords.add("OPTION");
		sqlWords.add("OR");
		sqlWords.add("ORDER");
		sqlWords.add("OUTER");
		sqlWords.add("OUTPUT_TYPE");
		sqlWords.add("OVERFLOW");
		sqlWords.add("PAGE_SIZE");
		sqlWords.add("PAGE");
		sqlWords.add("PAGES");
		sqlWords.add("PARAMETER");
		sqlWords.add("PASSWORD");
		sqlWords.add("PLAN");
		sqlWords.add("POSITION");
		sqlWords.add("POST_EVENT");
		sqlWords.add("PRECISION");
		sqlWords.add("PROCEDURE");
		sqlWords.add("PROTECTED");
		sqlWords.add("PRIMARY");
		sqlWords.add("PRIVILEGES");
		sqlWords.add("RAW_PARTITIONS");
		sqlWords.add("RDB$DB_KEY");
		sqlWords.add("READ");
		sqlWords.add("REAL");
		sqlWords.add("RECORD_VERSION");
		sqlWords.add("REFERENCES");
		sqlWords.add("RESERV");
		sqlWords.add("RESERVING");
		sqlWords.add("RETAIN");
		sqlWords.add("RETURNING_VALUES");
		sqlWords.add("RETURNS");
		sqlWords.add("REVOKE");
		sqlWords.add("RIGHT");
		sqlWords.add("ROLLBACK");
		sqlWords.add("SECOND");
		sqlWords.add("SEGMENT");
		sqlWords.add("SELECT");
		sqlWords.add("SET");
		sqlWords.add("SHARED");
		sqlWords.add("SHADOW");
		sqlWords.add("SCHEMA");
		sqlWords.add("SINGULAR");
		sqlWords.add("SIZE");
		sqlWords.add("SMALLINT");
		sqlWords.add("SNAPSHOT");
		sqlWords.add("SOME");
		sqlWords.add("SORT");
		sqlWords.add("SQLCODE");
		sqlWords.add("STABILITY");
		sqlWords.add("STARTING");
		sqlWords.add("STARTS");
		sqlWords.add("STATISTICS");
		sqlWords.add("SUB_TYPE");
		sqlWords.add("SUBSTRING");
		sqlWords.add("SUM");
		sqlWords.add("SUSPEND");
		sqlWords.add("TABLE");
		sqlWords.add("THEN");
		sqlWords.add("TIME");
		sqlWords.add("TIMESTAMP");
		sqlWords.add("TIMEZONE_HOUR");
		sqlWords.add("TIMEZONE_MINUTE");
		sqlWords.add("TO");
		sqlWords.add("TRAILING");
		sqlWords.add("TRANSACTION");
		sqlWords.add("TRIGGER");
		sqlWords.add("TRIM");
		sqlWords.add("UNCOMMITTED");
		sqlWords.add("UNION");
		sqlWords.add("UNIQUE");
		sqlWords.add("UPDATE");
		sqlWords.add("UPPER");
		sqlWords.add("USER");
		sqlWords.add("VALUE");
		sqlWords.add("VALUES");
		sqlWords.add("VARCHAR");
		sqlWords.add("VARIABLE");
		sqlWords.add("VARYING");
		sqlWords.add("VIEW");
		sqlWords.add("WAIT");
		sqlWords.add("WHEN");
		sqlWords.add("WHERE");
		sqlWords.add("WHILE");
		sqlWords.add("WITH");
		sqlWords.add("WORK");
		sqlWords.add("WRITE");
		sqlWords.add("YEAR");
	}
	
	public static void main(String[] args){
		try{
			String fileSource="c:\\temp.sql";
			String fileDestination="c:\\temp2.sql";
			BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(new File(fileSource))));
			BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(fileDestination))));
			String line=null;
			while((line=reader.readLine())!=null){
				int dotPosition=line.indexOf(",");
				if(dotPosition>=0){
					line=line.substring(0,dotPosition);
				}			
				line="sqlWords.add(\""+line+"\");";
				writer.write(line);
				writer.write("\n");
			}
			writer.flush();
			writer.close();
			reader.close();
			System.out.println("Ok");
		}catch(Exception ex){
			System.out.println("Exception ex:"+ex.getMessage());
		}
	}

}
