--    This SQL DDL script was generated by Microsoft Visual Studio (Release Date: LOCAL BUILD).

--    Driver Used : Microsoft Visual Studio - Oracle Server Driver.
--    Document    : C:\Projects\ratanet\Documentation\00-Inception\business requirements\BusinessModel\DBModel2002.vsd.
--    Time Created: 30 August 2010 ï¿½. 14:38.
--    Operation   : From Visio Generate Wizard.
--    Connected data source : No connection.
--    Connected server      : No connection.
--    Connected database    : Not applicable.



-- Create a database.
connect internal ;
startup nomount pfile=   ;
spool create_db_a ;

create database A; 

create rollback segment a_r0 tablespace system ; 

alter rollback segment  a_r0 online ; 

-- Create Oracle exception file.
create table exceptions ( row_id rowid, owner varchar2(30), table_name varchar2(30), constraint varchar2(30)) ; 


-- Create new table INSUR_PRODUCT_GROUP.
-- INSUR_PRODUCT_GROUP : Table of Insur_Product_Group
-- 	ID : id identifies Insur_Product_Group
-- 	NAME : name is of Insur_Product_Group
-- 	ISMANDATORY : isMandatory is of Insur_Product_Group  
create table INSUR_PRODUCT_GROUP (
	ID INTEGER not null,
	NAME VARCHAR2(100) not null,
	ISMANDATORY CHAR(1) not null, constraint INSUR_PRODUCT_GROUP_PK primary key (ID) ); 

-- Create new table INSUR_TYPE_INSUR_GROUP.
-- INSUR_TYPE_INSUR_GROUP : Table of Insur_Type_Insur_Group
-- 	ID : id identifies Insur_Type_Insur_Group
-- 	ID_INSUR_TYPE : ID_Insur_Type is of Insur_Type_Insur_Group
-- 	ID_INSUR_GROUP : ID_Insur_Group is of Insur_Type_Insur_Group  
create table INSUR_TYPE_INSUR_GROUP (
	ID INTEGER not null,
	ID_INSUR_TYPE INTEGER not null,
	ID_INSUR_GROUP INTEGER not null, constraint INSUR_TYPE_INSUR_GROUP_PK primary key (ID) ); 

-- Create new table POWEROFATTORNEY.
-- POWEROFATTORNEY : Table of PowerOfAttorney
-- 	ID : id identifies PowerOfAttorney
-- 	ID_USER : ID_User is of PowerOfAttorney
-- 	DICTIONARY_TYPE_OF_ATTORNEY : Dictionary_Type_of_attorney is of PowerOfAttorney
-- 	ATTORNEY_NUMBER : attorney_number is of PowerOfAttorney
-- 	ATTORNEY_DATE_START : attorney_date_start is of PowerOfAttorney
-- 	ATTORNEY_DATE_FINISH : attorney_date_finish is of PowerOfAttorney
-- 	DICTIONARY_TYPE_PURPOSE : Dictionary_Type_Purpose is of PowerOfAttorney
-- 	ID_EXTERNALDISTRIBUTOR : ID_ExternalDistributor is of PowerOfAttorney  
create table POWEROFATTORNEY (
	ID INTEGER not null,
	ID_USER INTEGER not null,
	DICTIONARY_TYPE_OF_ATTORNEY VARCHAR2(30) null,
	ATTORNEY_NUMBER VARCHAR2(300) null,
	ATTORNEY_DATE_START DATE null,
	ATTORNEY_DATE_FINISH DATE null,
	DICTIONARY_TYPE_PURPOSE VARCHAR2(30) null,
	ID_EXTERNALDISTRIBUTOR INTEGER null, constraint POWEROFATTORNEY_PK primary key (ID) ); 

-- Create new table INSUR_FORMULA.
-- INSUR_FORMULA : Table of Insur_Formula
-- 	ID : id identifies Insur_Formula
-- 	ID_FORMULA : id_formula is of Insur_Formula
-- 	NAME : Name is of Insur_Formula
-- 	ID_INSUR_BAREME : ID_Insur_Bareme is of Insur_Formula  
create table INSUR_FORMULA (
	ID INTEGER not null,
	ID_FORMULA VARCHAR2(100) null,
	NAME VARCHAR2(250) null,
	ID_INSUR_BAREME INTEGER not null, constraint INSUR_FORMULA_PK primary key (ID) ); 

-- Create new table INSUR_BAREME.
-- INSUR_BAREME : Table of Insur_Bareme
-- 	ID : id identifies Insur_Bareme
-- 	ID_INSUR_TYPE : ID_Insur_Type is of Insur_Bareme
-- 	NAME : name is of Insur_Bareme
-- 	DATESTART : DateStart is of Insur_Bareme
-- 	DATEFINISH : DateFinish is of Insur_Bareme
-- 	DICTIONARY_STATUS_PRICING : Dictionary_Status_pricing is of Insur_Bareme
-- 	DURATIONMIN : DurationMin is of Insur_Bareme
-- 	DURATIONMAX : DurationMax is of Insur_Bareme
-- 	AMOUNTMIN : AmountMin is of Insur_Bareme
-- 	AMOUNTMAX : AmountMax is of Insur_Bareme
-- 	AGEMIN : AgeMin is of Insur_Bareme
-- 	AGEMAX : AgeMax is of Insur_Bareme
-- 	DICTIONARY_INS_PEOPLE_NUM : Dictionary_ins_people_num is of Insur_Bareme
-- 	PERCENTAGE : Percentage is of Insur_Bareme
-- 	DICTIONARY_BASE_PERCENTAGE : Dictionary_Base_percentage is of Insur_Bareme
-- 	FIXED_AMOUNT : Fixed_amount is of Insur_Bareme
-- 	COMISSION_PREMIUM : Comission_premium is of Insur_Bareme
-- 	DICTIONARY_INSURANCE_OBJECT : Dictionary_Insurance_Object is of Insur_Bareme  
create table INSUR_BAREME (
	ID INTEGER not null,
	ID_INSUR_TYPE INTEGER not null,
	NAME VARCHAR2(100) null,
	DATESTART DATE null,
	DATEFINISH DATE null,
	DICTIONARY_STATUS_PRICING VARCHAR2(30) null,
	DURATIONMIN INTEGER null,
	DURATIONMAX INTEGER null,
	AMOUNTMIN NUMBER(20,6) null,
	AMOUNTMAX NUMBER(20,6) null,
	AGEMIN INTEGER null,
	AGEMAX INTEGER null,
	DICTIONARY_INS_PEOPLE_NUM VARCHAR2(30) null,
	PERCENTAGE NUMBER(20,6) null,
	DICTIONARY_BASE_PERCENTAGE VARCHAR2(30) null,
	FIXED_AMOUNT NUMBER(20,6) null,
	COMISSION_PREMIUM NUMBER(20,6) null,
	DICTIONARY_INSURANCE_OBJECT VARCHAR2(30) not null,
	LAST_UPDATE DATE null, constraint INSUR_BAREME_PK primary key (ID) ); 

-- Create new table INSUR_GROUP.
-- INSUR_GROUP : Table of Insur_Group
-- 	ID : id identifies Insur_Group
-- 	ISMANDATORY : IsMandatory is of Insur_Group
-- 	NAME : name is of Insur_Group  
create table INSUR_GROUP (
	ID INTEGER not null,
	ISMANDATORY CHAR(1) not null,
	NAME VARCHAR2(100) not null, constraint INSUR_GROUP_PK primary key (ID) ); 

-- Create new table INSUR_PEOPLE_NUMBER.
-- INSUR_PEOPLE_NUMBER : Table of Insur_People_number
-- 	ID : id identifies Insur_People_number
-- 	ID_INSUR_TYPE : ID_Insur_Type is of Insur_People_number
-- 	DICTIONARY_INS_PEOPLE_NUM : Dictionary_ins_people_num is of Insur_People_number  
create table INSUR_PEOPLE_NUMBER (
	ID INTEGER not null,
	ID_INSUR_TYPE INTEGER not null,
	DICTIONARY_INS_PEOPLE_NUM VARCHAR2(30) null, constraint INSUR_PEOPLE_NUMBER_PK primary key (ID) ); 

-- Create new table INSUR_TYPEOBJECT.
-- INSUR_TYPEOBJECT : Table of Insur_TypeObject
-- 	ID : id identifies Insur_TypeObject
-- 	ID_INSUR_TYPE : ID_Insur_Type is of Insur_TypeObject
-- 	DICTIONARY_INSURANCE_OBJECT : Dictionary_Insurance_Object is of Insur_TypeObject  
create table INSUR_TYPEOBJECT (
	ID INTEGER not null,
	ID_INSUR_TYPE INTEGER not null,
	DICTIONARY_INSURANCE_OBJECT VARCHAR2(30) null, constraint INSUR_TYPEOBJECT_PK primary key (ID) ); 

-- Create new table INSUR_TYPE_PROFESSION.
-- INSUR_TYPE_PROFESSION : Table of Insur_Type_Profession
-- 	ID : id identifies Insur_Type_Profession
-- 	ID_INSUR_TYPE : ID_Insur_Type is of Insur_Type_Profession
-- 	DICTIONARY_PROFESSION : Dictionary_Profession is of Insur_Type_Profession  
create table INSUR_TYPE_PROFESSION (
	ID INTEGER not null,
	ID_INSUR_TYPE INTEGER not null,
	DICTIONARY_PROFESSION VARCHAR2(30) null, constraint INSUR_TYPE_PROFESSION_PK primary key (ID) ); 

-- Create new table INSUR_CONTRACT.
-- INSUR_CONTRACT : Table of Insur_Contract
-- 	ID : id identifies Insur_Contract
-- 	CODE_INSURANCE_CONTRACT : code_insurance_contract is of Insur_Contract
-- 	NAME : name is of Insur_Contract
-- 	ID_INSUR_TYPE : ID_Insur_Type is of Insur_Contract
-- 	VERSIONNUMBER : VersionNumber is of Insur_Contract
-- 	VERSIONDATE : VersionDate is of Insur_Contract
-- 	ISVERSIONACTIVE : IsVersionActive is of Insur_Contract  
create table INSUR_CONTRACT (
	ID INTEGER not null,
	CODE_INSURANCE_CONTRACT VARCHAR2(100) not null,
	NAME VARCHAR2(100) null,
	ID_INSUR_TYPE INTEGER not null,
	VERSIONNUMBER VARCHAR2(10) null,
	VERSIONDATE DATE null,
	ISVERSIONACTIVE CHAR(1) null, constraint INSUR_CONTRACT_PK primary key (ID) ); 

-- Create new table INSUR_TYPE.
-- INSUR_TYPE : Table of Insur_Type
-- 	ID : id identifies Insur_Type
-- 	ID_INSUR_PRODUCT : ID_Insur_Product is of Insur_Type
-- 	NAME : name is of Insur_Type
-- 	NAMESCREEN : NameScreen is of Insur_Type
-- 	DESCRIPTION : Description is of Insur_Type
-- 	DATESTART : DateStart is of Insur_Type
-- 	DATEFINISH : DateFinish is of Insur_Type
-- 	DICTIONARY_STATUS_PRICING : Dictionary_Status_pricing is of Insur_Type
-- 	DICTIONARY_TYPE_INSURANCE : Dictionary_Type_Insurance is of Insur_Type
-- 	ID_INSURANCE_COMPANY : id_insurance_company is of Insur_Type
-- 	DURATIONMIN : DurationMin is of Insur_Type
-- 	DURATIONMAX : DurationMax is of Insur_Type
-- 	AMOUNTMIN : AmountMin is of Insur_Type
-- 	AMOUNTMAX : AmountMax is of Insur_Type
-- 	AGEMIN : AgeMin is of Insur_Type
-- 	AGEMAX : AgeMax is of Insur_Type
-- 	ISPROFESSION : IsProfession is of Insur_Type
-- 	CODE_OF_INSURANCE_PROG_CARDIFF : code_of_insurance_prog_cardiff is of Insur_Type
-- 	ID_EXTERNALDISTRIBUTOR : ID_ExternalDistributor is of Insur_Type
-- 	DICTIONARY_POLICY_INSURANCE : Dictionary_Policy_Insurance is of Insur_Type  
create table INSUR_TYPE (
	ID INTEGER not null,
	ID_INSUR_PRODUCT INTEGER not null,
	NAME VARCHAR2(100) null,
	NAMESCREEN VARCHAR2(100) null,
	DESCRIPTION VARCHAR2(500) null,
	DATESTART DATE null,
	DATEFINISH DATE null,
	DICTIONARY_STATUS_PRICING VARCHAR2(30) null,
	DICTIONARY_TYPE_INSURANCE VARCHAR2(30) null,
	ID_INSURANCE_COMPANY VARCHAR2(100) null,
	DURATIONMIN INTEGER null,
	DURATIONMAX INTEGER null,
	AMOUNTMIN NUMBER(20,6) null,
	AMOUNTMAX NUMBER(20,6) null,
	AGEMIN INTEGER null,
	AGEMAX INTEGER null,
	ISPROFESSION CHAR(1) null,
	CODE_OF_INSURANCE_PROG_CARDIFF VARCHAR2(100) null,
	ID_EXTERNALDISTRIBUTOR INTEGER not null,
	DICTIONARY_POLICY_INSURANCE VARCHAR2(30) null,
	LAST_UPDATE DATE null, constraint INSUR_TYPE_PK primary key (ID) ); 

 -- Create new table INSUR_PRODUCT_PRODUCT.
 -- INSUR_PRODUCT_PRODUCT : Table of Insur_Product_Product
 -- 	ID : id identifies Insur_Product_Product
 -- 	ID_INSUR_PRODUCT_GROUP : ID_Insur_Product_Group is of Insur_Product_Product
 --	IS_MANDATORY : isMandatory is of Insur_Product_Product  
 -- 	ID_INSUR_PRODUCT : ID_insur_product is of Insur_Product_Product  
    create table INSUR_PRODUCT_PRODUCT (
	    ID INTEGER not null,
	    ID_INSUR_PRODUCT_GROUP INTEGER not null,
	    IS_MANDATORY CHAR(1) not null,
	    ID_INSUR_PRODUCT INTEGER not null, constraint INSUR_PRODUCT_PRODUCT_PK primary key (ID) ); 

-- Create new table INSUR_PRODUCT.
-- INSUR_PRODUCT : Table of Insur_Product
-- 	ID : id identifies Insur_Product
-- 	NAME : Name is of Insur_Product
-- 	NAMESCREEN : NameScreen is of Insur_Product
-- 	DESCRIPTION : Description is of Insur_Product
-- 	DICTIONARY_TYPE_OF_PRODUCT : Dictionary_Type_Of_Product is of Insur_Product
-- 	DICTIONARY_TYPE_PROD_CONTENT : Dictionary_Type_Prod_Content is of Insur_Product
-- 	DATESTART : DateStart is of Insur_Product
-- 	DATEFINISH : DateFinish is of Insur_Product
-- 	DICTIONARY_STATUS_PRICING : Dictionary_Status_pricing is of Insur_Product
-- 	DICTIONARY_CURRENCY : Dictionary_Currency is of Insur_Product  
create table INSUR_PRODUCT (
	ID INTEGER not null,
	NAME VARCHAR2(100) not null,
	NAMESCREEN VARCHAR2(100) not null,
	DESCRIPTION VARCHAR2(500) null,
	DICTIONARY_TYPE_OF_PRODUCT VARCHAR2(30) null,
	DICTIONARY_TYPE_PROD_CONTENT VARCHAR2(30) null,
	DATESTART DATE null,
	DATEFINISH DATE null,
	DICTIONARY_STATUS_PRICING VARCHAR2(30) null,
	DICTIONARY_CURRENCY VARCHAR2(30) null, 
	LAST_UPDATE DATE null, constraint INSUR_PRODUCT_PK primary key (ID) ); 

-- Create new table INSUR_OBJECT_ED.
-- INSUR_OBJECT_ED : Table of Insur_Object_ED
-- 	ID : id identifies Insur_Object_ED
-- 	ID_EXTERNALDISTRIBUTOR : ID_ExternalDistributor is of Insur_Object_ED
-- 	DICTIONARY_INSURANCE_OBJECT : Dictionary_Insurance_Object is of Insur_Object_ED  
create table INSUR_OBJECT_ED (
	ID INTEGER not null,
	ID_EXTERNALDISTRIBUTOR INTEGER not null,
	DICTIONARY_INSURANCE_OBJECT VARCHAR2(30) null, constraint INSUR_OBJECT_ED_PK primary key (ID) ); 

-- Create new table INSUR_COEFFICIENTS
-- INSUR_COEFFICIENTS :
--	INSURANCE_TYPE_RID :
--	DICTIONARY_ID :
--	OWNER_DICTIONARY_ID :
--	VALUE :
--	COEFFICIENT_RID :
create table INSUR_COEFFICIENTS (
	INSURANCE_TYPE_RID NUMBER(19,0)  not null, 
	DICTIONARY_ID VARCHAR2(255)  not null, 
	OWNER_DICTIONARY_ID VARCHAR2(255)  not null,
	VALUE NUMBER(19,2)  not null,
	COEFFICIENT_RID NUMBER(19,0) null, constraint  primary key (INSURANCE_TYPE_RID, DICTIONARY_ID, OWNER_DICTIONARY_ID) );

-- Create new table AU_AUDIT.
-- AU_AUDIT : Table of AU_AUDIT
-- 	ACTION_DATE : action_date is of AU_AUDIT
-- 	INITIATOR_ID : initiator_id is of AU_AUDIT
-- 	INITIATOR_LOGIN : initiator_login is of AU_AUDIT
-- 	AUDIT_TYPE : audit_type is of AU_AUDIT
-- 	SUBSYS_TYPE : subsys_type is of AU_AUDIT
-- 	SUBSYS_ID : subsys_id is of AU_AUDIT
-- 	SUBSYS_NAME : subsys_name is of AU_AUDIT
-- 	ACTION_TYPE : action_type is of AU_AUDIT
-- 	DESCRIPTION : description is of AU_AUDIT
-- 	EXTENSION_FIELD : extension_field is of AU_AUDIT
-- 	REFERENCE : reference is of AU_AUDIT
-- 	ID : id identifies AU_AUDIT  
create table AU_AUDIT (
	ACTION_DATE DATE null,
	INITIATOR_ID INTEGER null,
	INITIATOR_LOGIN VARCHAR2(32) null,
	AUDIT_TYPE INTEGER null,
	SUBSYS_TYPE INTEGER null,
	SUBSYS_ID INTEGER null,
	SUBSYS_NAME VARCHAR2(32) null,
	ACTION_TYPE INTEGER null,
	DESCRIPTION VARCHAR2(256) null,
	EXTENSION_FIELD VARCHAR2(256) null,
	REFERENCE INTEGER null,
	ID INTEGER not null, constraint AU_AUDIT_PK primary key (ID) ); 

-- Create new table AU_ACTION_TYPE.
-- AU_ACTION_TYPE : Table of AU_ACTION_TYPE
-- 	ID : id identifies AU_ACTION_TYPE
-- 	SHOWNAME : showname is of AU_ACTION_TYPE
-- 	DESCRIPTION : description is of AU_ACTION_TYPE  
create table AU_ACTION_TYPE (
	ID INTEGER not null,
	SHOWNAME VARCHAR2(32) null,
	DESCRIPTION VARCHAR2(256) null, constraint AU_ACTION_TYPE_PK primary key (ID) ); 

-- Create new table AU_SUBSYS_TYPE.
-- AU_SUBSYS_TYPE : Table of AU_SUBSYS_TYPE
-- 	ID : id identifies AU_SUBSYS_TYPE
-- 	SHOWNAME : showname is of AU_SUBSYS_TYPE
-- 	DESCRIPTION : description is of AU_SUBSYS_TYPE  
create table AU_SUBSYS_TYPE (
	ID INTEGER not null,
	SHOWNAME VARCHAR2(32) null,
	DESCRIPTION VARCHAR2(256) null, constraint AU_SUBSYS_TYPE_PK primary key (ID) ); 

-- Create new table AU_AUDIT_TYPE.
-- AU_AUDIT_TYPE : Table of AU_AUDIT_TYPE
-- 	ID : id identifies AU_AUDIT_TYPE
-- 	SHOWNAME : showname is of AU_AUDIT_TYPE
-- 	DESCRIPTION : description is of AU_AUDIT_TYPE  
create table AU_AUDIT_TYPE (
	ID INTEGER not null,
	SHOWNAME VARCHAR2(32) null,
	DESCRIPTION VARCHAR2(256) null, constraint AU_AUDIT_TYPE_PK primary key (ID) ); 

-- Create new table DUEDAYS.
-- DUEDAYS : Table of DueDays
-- 	ID : id identifies DueDays
-- 	ID_CREDITTYPE : ID_CreditType is of DueDays
-- 	DUEDAY : DueDay is of DueDays  
create table DUEDAYS (
	ID INTEGER not null,
	ID_CREDITTYPE INTEGER not null,
	DUEDAY INTEGER not null, constraint DUEDAYS_PK primary key (ID) ); 

-- Create new table CREDITTYPEBAREME.
-- CREDITTYPEBAREME : Table of CreditTypeBareme
-- 	ID : id identifies CreditTypeBareme
-- 	ID_CREDITTYPE : id_credittype is of CreditTypeBareme
-- 	BAREME_CODE : bareme_code is of CreditTypeBareme  
create table CREDITTYPEBAREME (
	ID INTEGER not null,
	ID_CREDITTYPE INTEGER not null,
	BAREME_CODE INTEGER not null,
	LAST_UPDATE DATE null, constraint CREDITTYPEBAREME_PK primary key (ID) ); 

-- Create new table EXTERNALDISTRIBUTORDOCUMENT.
-- EXTERNALDISTRIBUTORDOCUMENT : Table of ExternalDistributorDocument
-- 	ID : id identifies ExternalDistributorDocument
-- 	EXTERNALDISTRIBUTOR_ID : ExternalDistributor_id is of ExternalDistributorDocument
-- 	DOCUMENT_TYPE : Document_type is of ExternalDistributorDocument
-- 	DOCUMENT_NAME : Document_name is of ExternalDistributorDocument  
create table EXTERNALDISTRIBUTORDOCUMENT (
	ID INTEGER not null,
	EXTERNALDISTRIBUTOR_ID INTEGER not null,
	DOCUMENT_TYPE VARCHAR2(50) null,
	DOCUMENT_NAME VARCHAR2(50) null, constraint EXTERNALDISTRIBUTORDOCUMENT_PK primary key (ID) ); 

-- Create new table DICTIONARY_RATA.
-- DICTIONARY_RATA : Table of Dictionary_rata
-- 	ID : id identifies Dictionary_rata
-- 	NAME : name partly identifies Dictionary_rata
-- 	"LANGUAGE" : language is of Dictionary_rata
-- 	"KEY" : key partly identifies Dictionary_rata
-- 	"VALUE" : value is of Dictionary_rata
-- 	EXPKEY : expKey is of Dictionary_rata
-- 	FROMDATE : fromDate is of Dictionary_rata
-- 	TODATE : toDate is of Dictionary_rata
-- 	VALID : valid is of Dictionary_rata
-- 	LASTMODIFICATIONDATE : lastModificationDate is of Dictionary_rata
-- 	PARENT_KEY : parent_key is of Dictionary_rata  
create table DICTIONARY_RATA (
	ID INTEGER not null,
	NAME VARCHAR2(30) null,
	"LANGUAGE" VARCHAR2(30) null,
	"KEY" VARCHAR2(50) null,
	"VALUE" VARCHAR2(1000) null,
	EXPKEY VARCHAR2(30) null,
	FROMDATE DATE null,
	TODATE DATE null,
	VALID NUMBER(10,2) null,
	LASTMODIFICATIONDATE DATE null,
	PARENT_KEY VARCHAR2(30) null,
	LAST_UPDATE DATE null, constraint DICTIONARY_RATA_PK primary key (ID) ); 

-- Create new table BALANCEUNIT.
-- BALANCEUNIT : Table of BalanceUnit
-- 	ID : ID identifies BalanceUnit
-- 	NAME : Name is of BalanceUnit
-- 	ISSEPARATEACCOUNTING : IsSeparateAccounting is of BalanceUnit
-- 	ISSEPARATEDATA : IsSeparateData is of BalanceUnit
-- 	DESCRIPTION : Description is of BalanceUnit  
create table BALANCEUNIT (
	ID INTEGER not null,
	NAME VARCHAR2(10) null,
	ISSEPARATEACCOUNTING CHAR(1) null,
	ISSEPARATEDATA CHAR(1) null,
	DESCRIPTION VARCHAR2(10) null, constraint BALANCEUNIT_PK primary key (ID) ); 

-- Create new table LINKEDHIERARCHY.
-- LINKEDHIERARCHY : Table of LinkEDHierarchy
-- 	ID : ID identifies LinkEDHierarchy
-- 	ID_HIERARCHY : ID_Hierarchy is of LinkEDHierarchy
-- 	ID_EXTERNALDISTRIBUTOR : ID_ExternalDistributor partly identifies LinkEDHierarchy
-- 	ID_EXTERNALDISTRIBUTORPARENT : ID_ExternalDistributorParent is of LinkEDHierarchy  
create table LINKEDHIERARCHY (
	ID INTEGER not null,
	ID_HIERARCHY INTEGER null,
	ID_EXTERNALDISTRIBUTOR INTEGER null,
	ID_EXTERNALDISTRIBUTORPARENT INTEGER null, constraint LINKEDHIERARCHY_PK primary key (ID) ); 

-- Create new table HIERARCHY.
-- HIERARCHY : Table of Hierarchy
-- 	ID : ID identifies Hierarchy
-- 	NAME : Name is of Hierarchy
-- 	DESCRIPTION : Description is of Hierarchy
-- 	DICTIONARY_HIERARCHY_PURPOSE : Dictionary_Hierarchy_Purpose is of Hierarchy  
create table HIERARCHY (
	ID INTEGER not null,
	NAME VARCHAR2(30) null,
	DESCRIPTION VARCHAR2(100) null,
	DICTIONARY_HIERARCHY_PURPOSE VARCHAR2(100) null, constraint HIERARCHY_PK primary key (ID) ); 

-- Create new table CREDITTYPEEXTERNALDISTRIBUTOR.
-- CREDITTYPEEXTERNALDISTRIBUTOR : Table of CreditTypeExternalDistributor
-- 	ID : ID identifies CreditTypeExternalDistributor
-- 	ID_CREDITTYPE : ID_CreditType is of CreditTypeExternalDistributor
-- 	ID_EXTERNALDISTRIBUTOR : ID_ExternalDistributor is of CreditTypeExternalDistributor  
create table CREDITTYPEEXTERNALDISTRIBUTOR (
	ID INTEGER not null,
	ID_CREDITTYPE INTEGER null,
	ID_EXTERNALDISTRIBUTOR INTEGER not null, constraint CREDITTYPEED_PK primary key (ID) ); 

-- Create new table GOODPARTNERGOODLINK.
-- GOODPARTNERGOODLINK : Table of GoodPartnerGoodLink
-- 	ID : ID identifies GoodPartnerGoodLink
-- 	ID_GOODEXTERNALDISTRIBUTOR : ID_GoodExternalDistributor is of GoodPartnerGoodLink
-- 	ID_GOODPARTNERCLASSIFICATION : ID_GoodPartnerClassification is of GoodPartnerGoodLink  
create table GOODPARTNERGOODLINK (
	ID INTEGER not null,
	ID_GOODEXTERNALDISTRIBUTOR INTEGER null,
	ID_GOODPARTNERCLASSIFICATION INTEGER null, constraint GOODPARTNERGOODLINK_PK primary key (ID) ); 

-- Create new table GOODEXTERNALDISTRIBUTOR.
-- GOODEXTERNALDISTRIBUTOR : Table of GoodExternalDistributor
-- 	ID : ID identifies GoodExternalDistributor
-- 	ID_EXTERNALDISTRIBUTOR : ID_ExternalDistributor is of GoodExternalDistributor
-- 	ID_ACCOUNTFINANCE : ID_AccountFinance is of GoodExternalDistributor
-- 	ID_ACCOUNTCOMISSION : ID_AccountComission is of GoodExternalDistributor
-- 	DICTIONARY_GOOD : Dictionary_Good is of GoodExternalDistributor  
create table GOODEXTERNALDISTRIBUTOR (
	ID INTEGER not null,
	ID_EXTERNALDISTRIBUTOR INTEGER not null,
	ID_ACCOUNTFINANCE INTEGER null,
	ID_ACCOUNTCOMISSION INTEGER null,
	DICTIONARY_GOOD VARCHAR2(30) null, constraint GOODEXTERNALDISTRIBUTOR_PK primary key (ID) ); 

-- Create new table CARBRANDEXTERNALDISTRIBUTOR.
-- CARBRANDEXTERNALDISTRIBUTOR : Table of CarBrandExternalDistributor
-- 	ID : ID identifies CarBrandExternalDistributor
-- 	ID_EXTERNALDISTRIBUTOR : ID_ExternalDistributor is of CarBrandExternalDistributor
-- 	ID_ACCOUNTFINANCE : ID_AccountFinance is of CarBrandExternalDistributor
-- 	ID_ACCOUNTCOMISSION : ID_AccountComission is of CarBrandExternalDistributor
-- 	DICTIONARY_BRAND : Dictionary_Brand is of CarBrandExternalDistributor  
create table CARBRANDEXTERNALDISTRIBUTOR (
	ID INTEGER not null,
	ID_EXTERNALDISTRIBUTOR INTEGER not null,
	ID_ACCOUNTFINANCE INTEGER null,
	ID_ACCOUNTCOMISSION INTEGER null,
	DICTIONARY_BRAND VARCHAR2(30) null, constraint CARBRANDEXTERNALDISTRIBUTOR_PK primary key (ID) ); 

-- Create new table CARMODELEXTERNALDISTRIBUTOR.
-- CARMODELEXTERNALDISTRIBUTOR : Table of CarModelExternalDistributor
-- 	ID : ID identifies CarModelExternalDistributor
-- 	ID_EXTERNALDISTRIBUTOR : ID_ExternalDistributor is of CarModelExternalDistributor
-- 	DICTIONARY_MODEL : Dictionary_Model is of CarModelExternalDistributor  
create table CARMODELEXTERNALDISTRIBUTOR (
	ID INTEGER not null,
	ID_EXTERNALDISTRIBUTOR INTEGER not null,
	DICTIONARY_MODEL VARCHAR2(30) null, constraint CARMODELEXTERNALDISTRIBUTOR_PK primary key (ID) ); 

-- Create new table GOODPARTNERCLASSIFICATION.
-- GOODPARTNERCLASSIFICATION : Table of GoodPartnerClassification
-- 	ID : ID identifies GoodPartnerClassification
-- 	NAME : Name is of GoodPartnerClassification
-- 	ID_EXTERNALDISTRIBUTOR : ID_ExternalDistributor is of GoodPartnerClassification  
create table GOODPARTNERCLASSIFICATION (
	ID INTEGER not null,
	NAME VARCHAR2(30) null,
	ID_EXTERNALDISTRIBUTOR INTEGER null, constraint GOODPARTNERCLASSIFICATION_PK primary key (ID) ); 

-- Create new table BANKACCOUNT.
-- BANKACCOUNT : Table of BankAccount
-- 	ID : ID identifies BankAccount
-- 	MFO : MFO is of BankAccount
-- 	ACCOUNT : Account is of BankAccount
-- 	BANKNAME : BankName is of BankAccount
-- 	DICTIONARY_PURPOSE_PAYMENT : Dictionary_Purpose_payment is of BankAccount
-- 	ISACCOUNTACTIVE : IsAccountActive is of BankAccount
-- 	ID_EXTERNALDISTRIBUTOR : ID_ExternalDistributor is of BankAccount  
create table BANKACCOUNT (
	ID INTEGER not null,
	MFO VARCHAR2(6) null,
	ACCOUNT VARCHAR2(14) null,
	BANKNAME VARCHAR2(100) null,
	DICTIONARY_PURPOSE_PAYMENT VARCHAR2(30) null,
	ISACCOUNTACTIVE CHAR(1) null,
	ID_EXTERNALDISTRIBUTOR INTEGER null,
	ACCOUNT_GROUP INTEGER null,
	LAST_UPDATE DATE null, constraint BANKACCOUNT_PK primary key (ID) ); 

-- Create new table EMPLOYEE.
-- EMPLOYEE : Table of Employee
-- 	ID : ID identifies Employee
-- 	"POSITION" : Position is of Employee
-- 	SURNAME : Surname is of Employee
-- 	NAME : Name is of Employee
-- 	PHONE1 : Phone1 is of Employee
-- 	PHONE2 : Phone2 is of Employee
-- 	EMAIL : Email is of Employee
-- 	ID_EXTERNAL_DISTRIBUTOR : ID_External_Distributor is of Employee  
create table EMPLOYEE (
	ID INTEGER not null,
	"POSITION" VARCHAR2(10) null,
	SURNAME VARCHAR2(10) null,
	NAME VARCHAR2(10) null,
	PHONE1 VARCHAR2(10) null,
	PHONE2 VARCHAR2(10) null,
	EMAIL VARCHAR2(10) null,
	ID_EXTERNAL_DISTRIBUTOR INTEGER null, constraint EMPLOYEE_PK primary key (ID) ); 

-- Create new table EXTERNALDISTRIBUTOR.
-- EXTERNALDISTRIBUTOR : Table of ExternalDistributor
-- 	ID : id identifies ExternalDistributor
-- 	NAME : Name is of ExternalDistributor
-- 	DICTIONARY_TYPE_ED : Dictionary_Type_ED is of ExternalDistributor
-- 	DICTIONARY_TYPE_ORGANIZATION : Dictionary_Type_Organization is of ExternalDistributor
-- 	ISLEGALENTITY : IsLegalEntity is of ExternalDistributor
-- 	DATEAGREEMENT : DateAgreement is of ExternalDistributor
-- 	NUMBERAGREEMENT : NumberAgreement is of ExternalDistributor
-- 	PHCITY : PhCity is of ExternalDistributor
-- 	PHPROVICE : PhProvice is of ExternalDistributor
-- 	PHSTREET : PhStreet is of ExternalDistributor
-- 	PHHOUSE : PhHouse is of ExternalDistributor
-- 	PHADDITIONAL : PhAdditional is of ExternalDistributor
-- 	PHZIPCODE : PhZipCode is of ExternalDistributor
-- 	OFFCITY : OffCity is of ExternalDistributor
-- 	OFFPROVINCE : OffProvince is of ExternalDistributor
-- 	OFFSTREET : OffStreet is of ExternalDistributor
-- 	OFFHOUSE : OffHouse is of ExternalDistributor
-- 	OFFADDITIONAL : OffAdditional is of ExternalDistributor
-- 	OFFZIPCODE : OffZipCode is of ExternalDistributor
-- 	EDRPOU : EDRPOU is of ExternalDistributor
-- 	ID_EXTERNALDISTRIBUTORCOMISION : ID_ExternalDistributorComision is of ExternalDistributor
-- 	ID_EXTERNALDISTRIBUTORFINANCE : ID_ExternalDistributorFinance is of ExternalDistributor
-- 	LIMIT : Limit is of ExternalDistributor
-- 	ISOWNGOODCLASSIFICATION : IsOwnGoodClassification is of ExternalDistributor
-- 	ISINDEPENDENTBAREME : IsIndependentBareme is of ExternalDistributor
-- 	EMAIL : Email is of ExternalDistributor
-- 	LOGO : Logo is of ExternalDistributor
-- 	ADVERTISEMENTPICTURE : AdvertisementPicture is of ExternalDistributor
-- 	ISSHOWINTERNALNUMBERGOOD : IsShowInternalNumberGood is of ExternalDistributor
-- 	TRANSITACCOUNTFINANCING : TransitAccountFinancing is of ExternalDistributor
-- 	TRANSITACCOUNTCOMMISSION : TransitAccountCommission is of ExternalDistributor
-- 	ID_BALANCEUNIT : ID_BalanceUnit is of ExternalDistributor
-- 	VERSIONNUMBER : VersionNumber is of ExternalDistributor
-- 	VERSIONDATE : VersionDate is of ExternalDistributor
-- 	ISVERSIONACTIVE : IsVersionActive is of ExternalDistributor
-- 	BAREME_CODE : Bareme_code is of ExternalDistributor
-- 	DICTIONARY_SECTORECONOM : Dictionary_SectorEconom is of ExternalDistributor
-- 	DICTIONARY_LEGALFORM : Dictionary_LegalForm is of ExternalDistributor
-- 	DICTIONARY_TDUSB : Dictionary_tdUsb is of ExternalDistributor
-- 	DICTIONARY_ECONOMICACTIVITY : Dictionary_EconomicActivity is of ExternalDistributor
-- 	DICTIONARY_FORMOWNERSHIP : Dictionary_FormOwnership is of ExternalDistributor
-- 	DICTIONARY_TYPESETLGOODRET : Field Dictionay_TypeSettlementsGoodReturn is of ExternalDistributor
-- 	DICTIONARY_PERIODGOODRETPAY : Field Dictionary_PeriodicityGoodReturnPayments is of ExternalDistributor
-- 	DICTIONARY_TYPEGOOD : Dictionary_TypeGood is of ExternalDistributor
-- 	DICTIONARY_ADDITIONALCLASS1 : Field Dictionary_AdditionalClassification1 is of ExternalDistributor
-- 	DICTIONARY_ADDITIONALCLASS2 : Field Dictionary_AdditionalClassification2 is of ExternalDistributor
-- 	DICTIONARY_STATUS_ED : Dictionary_Status_ed is of ExternalDistributor
-- 	SAP_BP_ID : SAP_BP_ID is of ExternalDistributor
-- 	SAP_BRANCH_ID : SAP_BRANCH_ID is of ExternalDistributor
-- 	PHONE1 : Phone1 is of ExternalDistributor
-- 	PHONE2 : Phone2 is of ExternalDistributor
-- 	DATE_OF_FINISH_AGREEMENT : Date_of_finish_agreement is of ExternalDistributor
-- 	DICTIONARY_SCHEMEOFCOMMISSION : Dictionary_SchemeOfCommission is of ExternalDistributor
-- 	DICTIONARY_TYPE_PAYMENT : Dictionary_Type_payment is of ExternalDistributor
-- 	DICTIONARY_TYPE_SETLMNT_COMMIS : Dictionary_Type_setlmnt_commis is of ExternalDistributor
-- 	PURPOSE_OF_PAYMENT : Purpose_of_payment is of ExternalDistributor
-- 	DICTIONARY_MODE_OF_CALCULATION : Dictionary_Mode_of_calculation is of ExternalDistributor
-- 	NUMBER_DAYS_CHARGING_PENALTY : Number_days_charging_penalty is of ExternalDistributor
-- 	DICTIONARY_TYPE_SETLMNT_SUBS : Dictionary_Type_setlmnt_subs is of ExternalDistributor
-- 	ISSUBSIDY_RETURN : IsSubsidy_return is of ExternalDistributor
-- 	DICTIONARY_START_POINT_CALC : Dictionary_start_point_calc is of ExternalDistributor
-- 	DICTIONARY_TYPE_SUBS_RET : Dictionary_Type_subs_ret is of ExternalDistributor
-- 	ISCOMISSION_RETURNED_GOOD_RET : IsComission_returned_good_ret is of ExternalDistributor
-- 	DICTIONARY_TYPE_COMIS_RET : Dictionary_Type_comis_ret is of ExternalDistributor
-- 	SIZE_OF_PENALTY : Size_of_penalty is of ExternalDistributor
-- 	ACCOUNT_GOODS_RETURN : Account_goods_return is of ExternalDistributor
-- 	BRANCH_ID : Branch_ID is of ExternalDistributor
-- 	ED_CODE_BY_PARTNER : Ed_code_by_partner is of ExternalDistributor
-- 	DICTIONARY_RDUSB : Dictionary_rdusb is of ExternalDistributor  
create table EXTERNALDISTRIBUTOR (
	ID INTEGER not null,
	NAME VARCHAR2(100) not null,
	DICTIONARY_TYPE_ED VARCHAR2(30) not null,
	DICTIONARY_TYPE_ORGANIZATION VARCHAR2(30) not null,
	ISLEGALENTITY CHAR(1) not null,
	DATEAGREEMENT DATE null,
	NUMBERAGREEMENT VARCHAR2(10) null,
	PHCITY VARCHAR2(100) not null,
	PHPROVICE VARCHAR2(100) null,
	PHSTREET VARCHAR2(200) not null,
	PHHOUSE VARCHAR2(20) null,
	PHADDITIONAL VARCHAR2(20) null,
	PHZIPCODE VARCHAR2(5) not null,
	OFFCITY VARCHAR2(100) not null,
	OFFPROVINCE VARCHAR2(100) null,
	OFFSTREET VARCHAR2(200) not null,
	OFFHOUSE VARCHAR2(20) null,
	OFFADDITIONAL VARCHAR2(20) null,
	OFFZIPCODE VARCHAR2(5) not null,
	EDRPOU VARCHAR2(10) null,
	ID_EXTERNALDISTRIBUTORCOMISION INTEGER null,
	ID_EXTERNALDISTRIBUTORFINANCE INTEGER null,
	LIMIT NUMBER(20,6) null,
	ISOWNGOODCLASSIFICATION CHAR(1) null,
	ISINDEPENDENTBAREME CHAR(1)  null,
	EMAIL VARCHAR2(10) null,
	LOGO VARCHAR2(100) null,
	ADVERTISEMENTPICTURE VARCHAR2(100) null,
	ISSHOWINTERNALNUMBERGOOD CHAR(1) null,
	TRANSITACCOUNTFINANCING VARCHAR2(14) null,
	TRANSITACCOUNTCOMMISSION VARCHAR2(14) null,
	ID_BALANCEUNIT INTEGER null,
	VERSIONNUMBER VARCHAR2(10) null,
	VERSIONDATE DATE null,
	ISVERSIONACTIVE CHAR(1)  null,
	BAREME_CODE INTEGER null,
	DICTIONARY_SECTORECONOM VARCHAR2(30) null,
	DICTIONARY_LEGALFORM VARCHAR2(30) null,
	DICTIONARY_TDUSB VARCHAR2(30) not null,
	DICTIONARY_ECONOMICACTIVITY VARCHAR2(30) null,
	DICTIONARY_FORMOWNERSHIP VARCHAR2(30) null,
	DICTIONARY_TYPESETLGOODRET VARCHAR2(30) null,
	DICTIONARY_PERIODGOODRETPAY VARCHAR2(30) null,
	DICTIONARY_TYPEGOOD VARCHAR2(30) null,
	DICTIONARY_ADDITIONALCLASS1 VARCHAR2(30) null,
	DICTIONARY_ADDITIONALCLASS2 VARCHAR2(30) null,
	DICTIONARY_STATUS_ED VARCHAR2(30) not null,
	SAP_BP_ID VARCHAR2(30) null,
	SAP_BRANCH_ID VARCHAR2(30) null,
	PHONE1 VARCHAR2(10) null,
	PHONE2 VARCHAR2(10) null,
	DATE_OF_FINISH_AGREEMENT DATE null,
	DICTIONARY_SCHEMEOFCOMMISSION VARCHAR2(30) null,
	DICTIONARY_TYPE_PAYMENT VARCHAR2(30) null,
	DICTIONARY_TYPE_SETLMNT_COMMIS VARCHAR2(30) null,
	PURPOSE_OF_PAYMENT VARCHAR2(160) null,
	DICTIONARY_MODE_OF_CALCULATION VARCHAR2(30) null,
	NUMBER_DAYS_CHARGING_PENALTY INTEGER  null,
	DICTIONARY_TYPE_SETLMNT_SUBS VARCHAR2(30) null,
	ISSUBSIDY_RETURN CHAR(1) not null,
	DICTIONARY_START_POINT_CALC VARCHAR2(30) null,
	DICTIONARY_TYPE_SUBS_RET VARCHAR2(30) null,
	ISCOMISSION_RETURNED_GOOD_RET CHAR(1) not null,
	DICTIONARY_TYPE_COMIS_RET VARCHAR2(30) null,
	SIZE_OF_PENALTY NUMBER(20,6)  null,
	ACCOUNT_GOODS_RETURN VARCHAR2(13) null,
	BRANCH_ID VARCHAR2(4) null,
	ED_CODE_BY_PARTNER VARCHAR2(10) null,
	DICTIONARY_RDUSB VARCHAR2(10) null,
	NETWORKNAME VARCHAR2(10) null,
	LAST_UPDATE DATE null, constraint EXTERNALDISTRIBUTOR_PK primary key (ID),
	ED_NAME_ENG	VARCHAR2(50) null,
	ID_TYPE_OF_PARTNER INTEGER null,
	ID_NETWORK_NAME_GEN INTEGER null,
	ID_CHANNEL_OF_SALES INTEGER null,
	ID_TECHNOLOGY_OF_SALES INTEGER null,
	ID_PARENT_CHANNEL INTEGER null,
	ID_PARENT_PARTNER INTEGER null,
	ED_PERMANENT_POS INTEGER null,
	LIBRA_PILOT VARCHAR2(10) null,
	DATE_BEG DATE null,
	DATE_END DATE null,
	DATE_CHANGED DATE null,
	ID_NETWORK_NAME INTEGER null,
	ID_NETWORK_SIGN INTEGER null,
	ED_START_POINT_REAL_DATE DATE null,
	ED_CLOSED_POINT_REAL_DATE DATE null,
	TU_CITY VARCHAR2(500) null,
	ED_ADDITIONAL_PERMANENT_POS INTEGER null,
	DICTIONARY_METHOD_OF_SALES INTEGER null
	); 

-- Create new table PERSONS.
-- PERSONS : Table of Persons
-- 	ID : ID identifies BalanceUnit
-- 	TAB_NUMBER : Tabel number
--	ID_EMPLOYEE_POSITION : employee position
--	FIRST_NAME : first name 
--	LAST_NAME : last name
create table PERSONS (
	ID INTEGER not null,
	TAB_NUMBER INTEGER not null,
	ID_EMPLOYEE_POSITION INTEGER not null,
	FIRST_NAME VARCHAR2(50) not null,
	LAST_NAME VARCHAR2(50) not null, constraint PERSONS_PK primary key (ID) );

-- Create new table ED_MANAGERS_LINK.
-- PERSONS : external distributor link to persons
-- 	ID : ID identifies BalanceUnit
--	ID_EXTERNAL_DISTRIBUTOR : corresponding to ExternalDistributor.ID
--	TAB_NUMBER : corresponding to Persons.TAB_NUMBER
--	BONUS : if bonus exists - true
create table ED_MANAGERS_LINK (
	ID INTEGER not null,
	ID_EXTERNAL_DISTRIBUTOR INTEGER null,
	TAB_NUMBER INTEGER null,
	BONUS CHAR(1) null, constraint ED_MANAGERS_LINK_PK primary key (ID) );

-- Create new table RECEIVERCOMMISSION.
-- RECEIVERCOMMISSION : Table of ReceiverCommission
-- 	ID : ID identifies ReceiverCommission
-- 	PERCENTAGE : Percentage is of ReceiverCommission
-- 	ID_EXTERNALDISTRIBUTORRECEIVER : ID_ExternalDistributorReceiver is of ReceiverCommission
-- 	ID_EXTERNALDISTRIBUTOR : ID_ExternalDistributor is of ReceiverCommission  
create table RECEIVERCOMMISSION (
	ID INTEGER not null,
	PERCENTAGE NUMBER(20,6) null,
	ID_EXTERNALDISTRIBUTORRECEIVER INTEGER not null,
	ID_EXTERNALDISTRIBUTOR INTEGER not null, constraint RECEIVERCOMMISSION_PK primary key (ID) ); 

-- Create new table COMMISSIONSCALE.
-- COMMISSIONSCALE : Table of CommissionScale
-- 	ID : ID identifies CommissionScale
-- 	AMOUNTMIN : AmountMin is of CommissionScale
-- 	AMOUNTMAX : AmountMax is of CommissionScale
-- 	VALUECOMMISSION : ValueCommission is of CommissionScale
-- 	ID_COMMISSION : ID_Commission is of CommissionScale  
create table COMMISSIONSCALE (
	ID INTEGER not null,
	AMOUNTMIN NUMBER(20,6) null,
	AMOUNTMAX NUMBER(20,6) null,
	VALUECOMMISSION VARCHAR2(10) null,
	ID_COMMISSION INTEGER null, constraint COMMISSIONSCALE_PK primary key (ID) ); 

-- Create new table COMMISSION.
-- COMMISSION : Table of Commission
-- 	ID : ID identifies Commission
-- 	NAME : Name is of Commission
-- 	DATESTART : DateStart is of Commission
-- 	DATEFINISH : DateFinish is of Commission
-- 	VALUECOMMISSION : ValueCommission is of Commission
-- 	DICTIONARY_PAYMENTPERIOD : Dictionary_PaymentPeriod is of Commission
-- 	DICTIONARY_CALCULATIONBASE : Dictionary_CalculationBase is of Commission
-- 	DICTIONARY_TYPECOMMISSION : Dictionary_TypeCommission is of Commission  
create table COMMISSION (
	ID INTEGER not null,
	NAME VARCHAR2(10) null,
	DATESTART DATE null,
	DATEFINISH DATE null,
	VALUECOMMISSION VARCHAR2(10) null,
	DICTIONARY_PAYMENTPERIOD VARCHAR2(10) null,
	DICTIONARY_CALCULATIONBASE VARCHAR2(10) null,
	DICTIONARY_TYPECOMMISSION VARCHAR2(10) null, constraint COMMISSION_PK primary key (ID) ); 

-- Create new table BAREME.
-- BAREME : Table of Bareme
-- 	ID : ID identifies Bareme
-- 	NAME : Name is of Bareme
-- 	BAREME_CODE : Bareme_code is of Bareme - for Expert System
-- 	BAREME_CODE_ES : Bareme_code_ES is of Bareme
-- 	DATESTART : DateStart is of Bareme
-- 	DATEFINISH : DateFinish is of Bareme
-- 	DATEPRODUCTION : DateProduction is of Bareme
-- 	DURATIONMIN : DurationMin is of Bareme
-- 	DURATIONMAX : DurationMax is of Bareme
-- 	TOTALPRICEMIN : TotalPriceMin is of Bareme
-- 	TOTALPRICEMAX : TotalPriceMax is of Bareme
-- 	DOWNPAYMENTMIN : DownpaymentMin is of Bareme
-- 	DOWNPAYMENTMAX : DownpaymentMax is of Bareme
-- 	VALUEINTERESTRATE : ValueInterestRate is of Bareme
-- 	ISOPENINGFEE : IsOpeningFee is of Bareme
-- 	VALUEOPENINGFEE : ValueOpeningFee is of Bareme
-- 	ISMONTHLYFEE : IsMonthlyFee is of Bareme
-- 	VALUEMONTHLYFEE : ValueMonthlyFee is of Bareme
-- 	ISSUBSIDY : IsSubsidy is of Bareme
-- 	VALUESUBSIDY : ValueSubsidy is of Bareme
-- 	ISCOMMISSION : IsCommission is of Bareme
-- 	ID_COMMISSION : ID_Commission is of Bareme
-- 	DICTIONARY_MODELCAR : Dictionary_ModelCar is of Bareme
-- 	DICTIONARY_TYPEOPENINGPAYING : Dictionary_TypeOpeningPaying is of Bareme
-- 	DICTIONARY_TYPESUBSIDY : Dictionary_TypeSubsidy is of Bareme
-- 	DICTIONARY_TYPEMOTHLYFEE : Dictionary_TypeMothlyFee is of Bareme
-- 	DICTIONARY_TYPEOPENINGFEE : Dictionary_TypeOpeningFee is of Bareme
-- 	DICTIONARY_STATUS_PRICING : Dictionary_Status_pricing is of Bareme
-- 	DICTIONARY_PRODUCERCAR : Dictionary_ProducerCar is of Bareme
-- 	MINIMUM_SUBSIDY_RATE : minimum_subsidy_rate is of Bareme  
--	VALUESUBSIDY : value of subsidy in percent  
create table BAREME (
	ID INTEGER not null,
	NAME VARCHAR2(100) not null,
	BAREME_CODE INTEGER not null,
	BAREME_CODE_ES VARCHAR2(3) null,
	DATESTART DATE not null,
	DATEFINISH DATE null,
	DATEPRODUCTION DATE null,
	DURATIONMIN INTEGER not null,
	DURATIONMAX INTEGER not null,
	TOTALPRICEMIN NUMBER(20,6) not null,
	TOTALPRICEMAX NUMBER(20,6) not null,
	DOWNPAYMENTMIN NUMBER(20,6) not null,
	DOWNPAYMENTMAX NUMBER(20,6) not null,
	VALUEINTERESTRATE NUMBER(20,6) not null,
	ISOPENINGFEE CHAR(1) not null,
	VALUEOPENINGFEE NUMBER(20,6) null,
	ISMONTHLYFEE CHAR(1) not null,
	VALUEMONTHLYFEE NUMBER(20,6) null,
	ISSUBSIDY CHAR(1) not null,
	VALUESUBSIDY NUMBER(20,6) null,
	ISCOMMISSION CHAR(1) not null,
	ID_COMMISSION INTEGER null,
	DICTIONARY_MODELCAR VARCHAR2(30) null,
	DICTIONARY_TYPEOPENINGPAYING VARCHAR2(30) null,
	DICTIONARY_TYPESUBSIDY VARCHAR2(30) null,
	DICTIONARY_TYPEMOTHLYFEE VARCHAR2(30) null,
	DICTIONARY_TYPEOPENINGFEE VARCHAR2(30) null,
	DICTIONARY_STATUS_PRICING VARCHAR2(30) null,
	DICTIONARY_PRODUCERCAR VARCHAR2(30) null,
	MINIMUM_SUBSIDY_RATE NUMBER(20,6) null,
        VALUECOMMISSION NUMBER(20,6) null,
	LAST_UPDATE DATE null, constraint BAREME_PK primary key (ID) ); 
        
-- Create new table CREDITTYPEACTIONCODE.
-- CREDITTYPEACTIONCODE : Table of CreditTypeActionCode
-- 	ID : ID identifies CreditTypeActionCode
-- 	ID_CREDITTYPE : ID_CreditType is of CreditTypeActionCode
-- 	ACTIONCODE : ActionCode is of CreditTypeActionCode  
create table CREDITTYPEACTIONCODE (
	ID INTEGER not null,
	ID_CREDITTYPE INTEGER null,
	ACTIONCODE VARCHAR2(13) null, constraint CREDITTYPEACTIONCODE_PK primary key (ID) ); 

-- Create new table CREDITTYPEGOOD.
-- CREDITTYPEGOOD : Table of CreditTypeGood
-- 	ID : ID identifies CreditTypeGood
-- 	ID_CREDITTYPE : ID_CreditType is of CreditTypeGood
-- 	NUMBER : Number is of CreditTypeGood
-- 	DICTIONARY_GOOD : Dictionary_Good is of CreditTypeGood  
create table CREDITTYPEGOOD (
	ID INTEGER not null,
	ID_CREDITTYPE INTEGER null,
	NUMBER INTEGER not null,
	DICTIONARY_GOOD VARCHAR2(30) null, constraint CREDITTYPEGOOD_PK primary key (ID) ); 

-- Create new table CREDITTYPEPROFESSION.
-- CREDITTYPEPROFESSION : Table of CreditTypeProfession
-- 	ID : ID identifies CreditTypeProfession
-- 	ID_CREDITTYPE : ID_CreditType is of CreditTypeProfession
-- 	DICTIONARY_PROFESSION : Dictionary_Profession is of CreditTypeProfession  
create table CREDITTYPEPROFESSION (
	ID INTEGER not null,
	ID_CREDITTYPE INTEGER null,
	DICTIONARY_PROFESSION VARCHAR2(30) null, constraint CREDITTYPEPROFESSION_PK primary key (ID) ); 

-- Create new table CREDITTYPEMANDATORYDOCUMENTLNK.
-- CREDITTYPEMANDATORYDOCUMENTLNK : Table of CreditTypeMandatoryDocumentLnk
-- 	ID : ID identifies CreditTypeMandatoryDocumentLnk
-- 	ID_CREDITTYPE : ID_CreditType is of CreditTypeMandatoryDocumentLnk
-- 	DICTIONARY_MANDATORYDOCUMENT : Dictionary_MandatoryDocument is of CreditTypeMandatoryDocumentLnk  
create table CREDITTYPEMANDATORYDOCUMENTLNK (
	ID INTEGER not null,
	ID_CREDITTYPE INTEGER null,
	DICTIONARY_MANDATORYDOCUMENT VARCHAR2(30) null, constraint CREDITTYPEMANDATDOCUMENTLNK_PK primary key (ID) ); 

-- Create new table CREDITTYPE.
-- CREDITTYPE : Table of CreditType
-- 	ID : ID identifies CreditType
-- 	NAME : Name is of CreditType
-- 	NAMESCREEN : NameScreen is of CreditType
-- 	DESCRIPTION : Description is of CreditType
-- 	DATESTART : DateStart is of CreditType
-- 	DATEFINISH : DateFinish is of CreditType
-- 	ISCOUNTERPROPOSAL : IsCounterProposal is of CreditType
-- 	ISINDEPENDENTBAREME : IsIndependentBareme is of CreditType
-- 	DATEPRODUCTION : DateProduction is of CreditType
-- 	ISPOSTPONEMENT : IsPostponement is of CreditType
-- 	DURATIONPOSTPONEMENTMIN : DurationPostponementMin is of CreditType
-- 	DURATIONPOSTPONEMENTMAX : DurationPostponementMax is of CreditType
-- 	DURATIONMIN : DurationMin is of CreditType
-- 	DURATIONMAX : DurationMax is of CreditType
-- 	TOTALPRICEMIN : TotalPriceMin is of CreditType
-- 	TOTALPRICEMAX : TotalPriceMax is of CreditType
-- 	DOWNPAYMENTMIN : DownpaymentMin is of CreditType
-- 	DOWNPAYMENTMAX : DownpaymentMax is of CreditType
-- 	ISAGE : IsAge is of CreditType
-- 	AGEMIN : AgeMin is of CreditType
-- 	AGEMAX : AgeMax is of CreditType
-- 	ISPROFESSION : IsProfession is of CreditType
-- 	ISACTIONCODE : IsActionCode is of CreditType
-- 	VERSIONNUMBER : VersionNumber is of CreditType
-- 	VERSIONDATE : VersionDate is of CreditType
-- 	ISVERSIONACTIVE : IsVersionActive is of CreditType
-- 	ID_PRODUCT : ID_Product is of CreditType
-- 	DICTIONARY_TYPECREDITTYPE : Dictionary_TypeCreditType is of CreditType
-- 	DICTIONARY_DAYFIRSTDUEDATE : Dictionary_DayFirstDueDate is of CreditType
-- 	DICTIONARY_TYPECREDITTYPERISK : Dictionary_TypeCreditTypeRisk is of CreditType
-- 	DICTIONARY_TYPEFIRSTDUEDATECAL : Field Dictionary_TypeFirstDueDateCalculation is of CreditType
-- 	DICTIONARY_UNITPOSTPONEMENT : Dictionary_UnitPostponement is of CreditType
-- 	DICTIONARY_TYPEDOWNPAYMENT : Dictionary_TypeDownpayment is of CreditType
-- 	DICTIONARY_STATUS_PRICING : Dictionary_Status_pricing is of CreditType
-- 	ES_CPRO : ES_CPRO is of CreditType
-- 	ES_NUMSCORE : ES_numscore is of CreditType
-- 	ID_INSUR_GROUP : ID_Insur_Group is of CreditType
-- 	ISINSURANCE : IsInsurance is of CreditType
-- 	DICTIONARY_PROMONONPROMO : Dictionary_PromoNonPromo is of CreditType  
create table CREDITTYPE (
	ID INTEGER not null,
	NAME VARCHAR2(100) not null,
	NAMESCREEN VARCHAR2(100) not null,
	DESCRIPTION VARCHAR2(500) null,
	DATESTART DATE not null,
	DATEFINISH DATE null,
	ISCOUNTERPROPOSAL CHAR(1) not null,
	ISINDEPENDENTBAREME CHAR(1) not null,
	DATEPRODUCTION DATE null,
	ISPOSTPONEMENT CHAR(1) not null,
	DURATIONPOSTPONEMENTMIN INTEGER null,
	DURATIONPOSTPONEMENTMAX INTEGER null,
	DURATIONMIN INTEGER not null,
	DURATIONMAX INTEGER not null,
	TOTALPRICEMIN NUMBER(20,6) not null,
	TOTALPRICEMAX NUMBER(20,6) not null,
	DOWNPAYMENTMIN NUMBER(20,6) not null,
	DOWNPAYMENTMAX NUMBER(20,6) not null,
	ISAGE CHAR(1) not null,
	AGEMIN INTEGER not null,
	AGEMAX INTEGER not null,
	ISPROFESSION CHAR(1) not null,
	ISACTIONCODE CHAR(1) not null,
	VERSIONNUMBER VARCHAR2(10) null,
	VERSIONDATE DATE null,
	ISVERSIONACTIVE CHAR(1) not null,
	ID_PRODUCT INTEGER not null,
	DICTIONARY_TYPECREDITTYPE VARCHAR2(30) null,
	DICTIONARY_DAYFIRSTDUEDATE VARCHAR2(30) null,
	DICTIONARY_TYPECREDITTYPERISK VARCHAR2(30) null,
	DICTIONARY_TYPEFIRSTDUEDATECAL VARCHAR2(30) null,
	DICTIONARY_UNITPOSTPONEMENT VARCHAR2(30) null,
	DICTIONARY_TYPEDOWNPAYMENT VARCHAR2(30) null,
	DICTIONARY_STATUS_PRICING VARCHAR2(30) null,
	ES_CPRO VARCHAR2(3) not null,
	ES_NUMSCORE VARCHAR2(3) null,
	ID_INSUR_GROUP INTEGER null,
	ISINSURANCE CHAR(1) not null,
	DICTIONARY_PROMONONPROMO VARCHAR2(30) null, 
	ENDGRACEPERIOD INTEGER null,
	LAST_UPDATE DATE null,constraint CREDITTYPE_PK primary key (ID) ); 


-- Create new table CREDITTYPECONDITION.
-- CREDITTYPECONDITION : Table of CreditType Condition
-- 	ID : ID identifies CreditType
-- 	NAME : Name is of CreditType
--id	car_production	risk_category	min_ammount	max_ammount	max_duration	min_downpayment	is_addeq

create table CREDITTYPECONDITION (
	ID INTEGER not null,
        DICTIONARY_CAR_PRODUCER VARCHAR2(30) not null,
	RISKCATEGORY INTEGER not null,
	TOTALPRICEMIN NUMBER(20,6) not null,
	TOTALPRICEMAX NUMBER(20,6) not null,
	DURATIONMAX INTEGER not null,
	DOWNPAYMENTMIN NUMBER(20,6) not null,
	ISADDEQUIPMENT CHAR(1) not null,
	DESCRIPTION VARCHAR2(500) null,
	LAST_UPDATE DATE null,constraint CREDITTYPE_PK primary key (ID) ); 

-- Create new table PRODUCT.
-- PRODUCT : Table of Product
-- 	ID : ID identifies Product
-- 	NAME : Name is of Product
-- 	NAMESCREEN : NameScreen is of Product
-- 	DESCRIPTION : Description is of Product
-- 	DATESTART : DateStart is of Product
-- 	DATEFINISH : DateFinish is of Product
-- 	DATEPRODUCTION : DateProduction is of Product
-- 	SIMULATIONDURATIONSTORING : SimulationDurationStoring is of Product
-- 	SIMULATIONNUMBEROPTION : SimulationNumberOption is of Product
-- 	SIMULATIONSTEP : SimulationStep is of Product
-- 	DURATIONMIN : DurationMin is of Product
-- 	DURATIONMAX : DurationMax is of Product
-- 	AMOUNTMIN : AmountMin is of Product
-- 	AMOUNTMAX : AmountMax is of Product
-- 	VERSIONNUMBER : VersionNumber is of Product
-- 	VERSIONDATE : VersionDate is of Product
-- 	ISVERSIONACTIVE : IsVersionActive is of Product
-- 	DICTIONARY_INTERESTACCRUING : Dictionary_InterestAccruing is of Product
-- 	DICTIONARY_CURRENCY : Dictionary_Currency is of Product
-- 	DICTIONARY_TYPEROUNDING : Dictionary_TypeRounding is of Product
-- 	DICTIONARY_TYPEAMORTPLAN : Field Dictionary_TypeAmortizationPlan is of Product
-- 	DICTIONARY_STARTPOINTFIRSTDUED : Field Dictionary_StartingPointFirstDueDate is of Product
-- 	DICTIONARY_STATUS_PRICING : Dictionary_Status_pricing is of Product
-- 	ISPLEDGE : IsPledge is of Product
-- 	DICTIONARY_TYPE_OF_PRODUCT : Dictionary_Type_Of_Product is of Product
-- 	DICTIONARY_TYPE_PROD_CONTENT : Dictionary_Type_Prod_Content is of Product
-- 	ID_INSUR_PRODUCT_GROUP : ID_Insur_Product_Group is of Product  
create table PRODUCT (
	ID INTEGER not null,
	NAME VARCHAR2(100) not null,
	NAMESCREEN VARCHAR2(100) not null,
	DESCRIPTION VARCHAR2(500) null,
	DATESTART DATE not null,
	DATEFINISH DATE null,
	DATEPRODUCTION DATE null,
	SIMULATIONDURATIONSTORING INTEGER not null,
	SIMULATIONNUMBEROPTION INTEGER not null,
	SIMULATIONSTEP INTEGER not null,
	DURATIONMIN INTEGER not null,
	DURATIONMAX INTEGER not null,
	AMOUNTMIN NUMBER(20,6) not null,
	AMOUNTMAX NUMBER(20,6) not null,
	VERSIONNUMBER VARCHAR2(10) null,
	VERSIONDATE DATE null,
	ISVERSIONACTIVE CHAR(1) not null,
	DICTIONARY_INTERESTACCRUING VARCHAR2(30) null,
	DICTIONARY_CURRENCY VARCHAR2(30) null,
	DICTIONARY_TYPEROUNDING VARCHAR2(30) null,
	DICTIONARY_TYPEAMORTPLAN VARCHAR2(30) null,
	DICTIONARY_STARTPOINTFIRSTDUED VARCHAR2(30) null,
	DICTIONARY_STATUS_PRICING VARCHAR2(30) null,
	ISPLEDGE CHAR(1) null,
	DICTIONARY_TYPE_OF_PRODUCT VARCHAR2(30) null,
	DICTIONARY_TYPE_PROD_CONTENT VARCHAR2(30) null,
	ID_INSUR_PRODUCT_GROUP INTEGER null,
	LAST_UPDATE DATE null, constraint PRODUCT_PK primary key (ID) ); 

-- Create new table "USER".
-- "USER" : Table of User
-- 	ID : id partly identifies User
-- 	LOGIN : login identifies User
-- 	PASSWORD : password is of User
-- 	NAME : name is of User
-- 	DESCRIPTION : description is of User
-- 	DICTIONARY_TYPE_OF_ATTORNEY : Dictionary_Type_of_attorney is of User
-- 	ATTORNEY_NUMBER : attorney_number is of User
-- 	ATTORNEY_DATE_START : attorney_date_start is of User
-- 	ATTORNEY_DATE_FINISH : attorney_date_finish is of User
-- 	CREATED : created is of User
-- 	ACTIVATED : activated is of User
-- 	DELETED : deleted is of User
-- 	BLOCKED : blocked is of User
-- 	BLOCKED_START : blocked_start is of User
-- 	BLOCKED_END : blocked_end is of User
-- 	BLOCKED_TEMPORARY : blocked_temporary is of User
-- 	LOGIN_ATTEMPTS : login_attempts is of User
-- 	PASSWORD_CHANGED : password_changed is of User
-- 	LAST_IP : last_ip is of User
-- 	REASON : reason is of User
-- 	STATUS : status is of User
-- 	TABLE_NUMBER : table_number is of User
-- 	PHONE1 : phone1 is of User
-- 	PHONE2 : phone2 is of User
-- 	BLOCKED_COMMENT : blocked_comment is of User
-- 	DELETED_COMMENT : deleted_comment is of User
-- 	LAST_SHOP_CODE : last_shop_code is of User
-- 	LAST_LOGIN : last_login is of User  
create table "USER" (
	ID INTEGER not null,
	LOGIN VARCHAR2(32) not null,
	PASSWORD VARCHAR2(400) null,
	NAME VARCHAR2(128) null,
	DESCRIPTION VARCHAR2(128) null,
	DICTIONARY_TYPE_OF_ATTORNEY VARCHAR2(30) null,
	ATTORNEY_NUMBER VARCHAR2(300) null,
	ATTORNEY_DATE_START DATE null,
	ATTORNEY_DATE_FINISH DATE null,
	CREATED DATE not null,
	ACTIVATED DATE null,
	DELETED DATE null,
	BLOCKED CHAR(1) not null,
	BLOCKED_START DATE null,
	BLOCKED_END DATE null,
	BLOCKED_TEMPORARY DATE null,
	LOGIN_ATTEMPTS INTEGER not null,
	PASSWORD_CHANGED DATE null,
	LAST_IP VARCHAR2(16) null,
	REASON INTEGER not null,
	STATUS INTEGER not null,
	TABLE_NUMBER VARCHAR2(10) null,
	PHONE1 VARCHAR2(10) null,
	PHONE2 VARCHAR2(10) null,
	BLOCKED_COMMENT VARCHAR2(256) null,
	DELETED_COMMENT VARCHAR2(256) null,
	LAST_SHOP_CODE VARCHAR2(20) null,
	LAST_LOGIN DATE null,
	LAST_UPDATE DATE null, 
	BIRTHDAY DATE null,
	TIN VARCHAR2(10) null,
	PASSPORT VARCHAR2(8) null,
	EMAIL VARCHAR2(50) null,
	BLOCKED_ROLE INTEGER null,constraint USER_PK primary key (ID) ); 

-- Create new table USEREXTERNALDISTRIBUTORLINK.
-- USEREXTERNALDISTRIBUTORLINK : Table of UserExternalDistributorLink
-- 	ID_EXTERNALDISTRIBUTOR : ID_ExternalDistributor partly identifies UserExternalDistributorLink
-- 	ID : id partly identifies UserExternalDistributorLink
-- 	ID_USER : ID_User is of UserExternalDistributorLink  
create table USEREXTERNALDISTRIBUTORLINK (
	ID_EXTERNALDISTRIBUTOR INTEGER null,
	ID INTEGER not null,
	ID_USER INTEGER null, constraint USEREDLINK_PK primary key (ID) ); 

-- Create new table USERROLELINK.
-- USERROLELINK : Table of UserRoleLink
-- 	ID : id identifies UserRoleLink
-- 	ID_USER : id_user is of UserRoleLink
-- 	ID_ROLE : id_role is of UserRoleLink  
create table USERROLELINK (
	ID INTEGER not null,
	ID_USER INTEGER null,
	ID_ROLE INTEGER null,
	LAST_UPDATE DATE null, constraint USERROLELINK_PK primary key (ID) ); 

-- Create new table USERRIGHT.
-- USERRIGHT : Table of UserRight
-- 	ID : id partly identifies UserRight
-- 	ID_ROLE : ID_Role partly identifies UserRight
-- 	ID_RIGHT : ID_Right is of UserRight  
create table USERRIGHT (
	ID INTEGER not null,
	ID_ROLE INTEGER not null,
	ID_RIGHT INTEGER null, constraint USERRIGHT_PK primary key (ID) ); 

-- Create new table USERPROPERTY.
-- USERPROPERTY : Table of UserProperty
-- 	ID : id partly identifies UserProperty
-- 	NAME : name partly identifies UserProperty
-- 	"VALUE" : value is of UserProperty
-- 	USER_ID : user_id is of UserProperty  
create table USERPROPERTY (
	ID INTEGER not null,
	NAME VARCHAR2(32) not null,
	"VALUE" VARCHAR2(255) null,
	USER_ID INTEGER not null, constraint USERPROPERTY_PK primary key (ID) ); 

-- Create new table ROLE.
-- ROLE : Table of Role
-- 	ID : id partly identifies Role
-- 	NAME : Name identifies Role
-- 	DESCRIPTION : Description is of Role
-- 	ISHIDDEN : isHidden is of Role
-- 	COMPETENCE_LEVEL : Competence_level is of Role
-- 	COMPETENCE_LEVEL_CC : Competence_level_cc is of Role
-- 	IS_ALLOWED_MAKE_DECISION : Is_allowed_make_decision is of Role  
create table ROLE (
	ID INTEGER not null,
	NAME VARCHAR2(64) not null,
	DESCRIPTION VARCHAR2(128) null,
	ISHIDDEN CHAR(1) not null,
	COMPETENCE_LEVEL VARCHAR2(30) null,
	COMPETENCE_LEVEL_CC INTEGER null,
	IS_ALLOWED_MAKE_DECISION CHAR(1) null,
	LAST_UPDATE DATE null, constraint ROLE_PK primary key (ID) ); 

-- Create new table "RIGHT".
-- "RIGHT" : Table of Right
-- 	ID : id partly identifies Right
-- 	NAME : Name identifies Right
-- 	DESCRIPTION : Description is of Right
-- 	GROUP_CODE : Group_code is of Right  
create table "RIGHT" (
	ID INTEGER not null,
	NAME VARCHAR2(32) not null,
	DESCRIPTION VARCHAR2(256) null,
	GROUP_CODE VARCHAR2(30) null, constraint RIGHT_PK primary key (ID) ); 


--create table RIGHTAMOUNTLINK(
--	ID INTEGER identity,
--        AMOUNTMIN max amount for right,
--        AMOUNTMAX min amount for right,
--	"RIGHTS" INTEGER right,
--	"PRODUCT" INTEGER  product,
--	constraint RIGHTAMOUNTLINK_PK primary key (ID) );
create table "RIGHTAMOUNTLINK" (
	ID INTEGER not null,
	AMOUNTMIN NUMBER(10,2) not null,
	AMOUNTMAX NUMBER(10,2) not null,
	"STAGE" VARCHAR2(40) not null,
        "RIGHTS"  INTEGER not null,
	"PRODUCT" INTEGER not null,constraint RIGHTAMOUNTLINK_PK primary key (ID) ); 



-- Create new table USER_LASTPWD_LIST.
-- USER_LASTPWD_LIST : Table of User_LastPwd_List
-- 	ID : id identifies User_LastPwd_List
-- 	PWD_DATE : pwd_date is of User_LastPwd_List
-- 	PASSWORD : password is of User_LastPwd_List
-- 	USER_ID : user_id is of User_LastPwd_List  
create table USER_LASTPWD_LIST (
	ID INTEGER not null,
	PWD_DATE DATE not null,
	PASSWORD VARCHAR2(100) not null,
	USER_ID INTEGER not null, constraint USER_LASTPWD_LIST_PK primary key (ID) ); 

-- Create new table USER_PWD_BLACKLIST.
-- USER_PWD_BLACKLIST : Table of User_Pwd_Blacklist
-- 	ID : id identifies User_Pwd_Blacklist
-- 	INBLACKLIST : inblacklist is of User_Pwd_Blacklist
-- 	REASON : reason is of User_Pwd_Blacklist
-- 	PASSWORD : password is of User_Pwd_Blacklist  
create table USER_PWD_BLACKLIST (
	ID INTEGER not null,
	INBLACKLIST CHAR(1) not null,
	REASON INTEGER not null,
	PASSWORD VARCHAR2(400) not null, constraint USER_PWD_BLACKLIST_PK primary key (ID) ); 

-- Create new table CREDITDOCUMENT
create table CREDITDOCUMENT (
	ID INTEGER not null,
	NAME VARCHAR2(250) not null,
	DESCRIPTION VARCHAR2(250) not null,
	DATESTART DATE not null,
	DATEFINISH DATE null,
	ISMANDATORY CHAR(1) not null,
	ISACTIVE CHAR(1) not null,
	ISACTIVE CHAR(1) not null,
        INDEX_NUM INTEGER  null,
        DOCUMENT_GROUP VARCHAR2(50) null,
	DOCUMENT_CATEGORY VARCHAR2(50)  null,
	ES_CATEGORY VARCHAR2(50)  null,
        LAST_UPDATE DATE null, constraint CREDITDOCUMENT_PK primary key (ID) ); 
        

-- Add the remaining keys, constraints and indexes for the table EXTERNALDISTRIBUTORDOCUMENT.
create unique index IDX_ED_ID_DOC_TYPE on EXTERNALDISTRIBUTORDOCUMENT (
	EXTERNALDISTRIBUTOR_ID,
	DOCUMENT_TYPE); 


alter table EXTERNALDISTRIBUTORDOCUMENT add constraint IDX_ED_ID_DOC_TYPE unique (
	EXTERNALDISTRIBUTOR_ID,
	DOCUMENT_TYPE); 


-- Add the remaining keys, constraints and indexes for the table DICTIONARY_RATA.
create index IDX1 on DICTIONARY_RATA (
	"KEY" ASC); 


-- Add the remaining keys, constraints and indexes for the table BAREME.
create unique index BAREME_CODE on BAREME (
	BAREME_CODE); 


alter table BAREME add constraint BAREME_CODE unique (
	BAREME_CODE); 


-- Add the remaining keys, constraints and indexes for the table "USER".
create unique index IDX_USER_LOGIN on "USER" (
	LOGIN); 


alter table "USER" add constraint IDX_USER_LOGIN unique (
	LOGIN); 


-- Add the remaining keys, constraints and indexes for the table USERROLELINK.
create unique index IDX_USERROLELINK_USERROLE on USERROLELINK (
	ID_ROLE,
	ID_USER); 


alter table USERROLELINK add constraint IDX_USERROLELINK_USERROLE unique (
	ID_ROLE,
	ID_USER); 


-- Add the remaining keys, constraints and indexes for the table USERPROPERTY.
create unique index IDX_NAME on USERPROPERTY (
	NAME); 


alter table USERPROPERTY add constraint IDX_NAME unique (
	NAME); 


-- Add the remaining keys, constraints and indexes for the table ROLE.
create unique index IDX_ROLE_NAME on ROLE (
	NAME); 


alter table ROLE add constraint IDX_ROLE_NAME unique (
	NAME); 


-- Add the remaining keys, constraints and indexes for the table "RIGHT".
create unique index IDX_RIGHT_NAME on "RIGHT" (
	NAME); 


alter table "RIGHT" add constraint IDX_RIGHT_NAME unique (
	NAME); 


-- Add foreign key constraints to table INSUR_TYPE_INSUR_GROUP.
alter table INSUR_TYPE_INSUR_GROUP
	add constraint INSUR_TYPE_INSUR_TIG_FK1 foreign key (
		ID_INSUR_TYPE)
	 references INSUR_TYPE (
		ID); 

alter table INSUR_TYPE_INSUR_GROUP
	add constraint INSUR_GROUP_INSUR_TIG_FK1 foreign key (
		ID_INSUR_GROUP)
	 references INSUR_GROUP (
		ID); 

-- Add foreign key constraints to table POWEROFATTORNEY.
alter table POWEROFATTORNEY
	add constraint USER_POWEROFATTORNEY_FK1 foreign key (
		ID_USER)
	 references "USER" (
		ID); 

alter table POWEROFATTORNEY
	add constraint ED_POWEROFATTORNEY_FK1 foreign key (
		ID_EXTERNALDISTRIBUTOR)
	 references EXTERNALDISTRIBUTOR (
		ID); 

-- Add foreign key constraints to table INSUR_FORMULA.
alter table INSUR_FORMULA
	add constraint INSUR_BAREME_INSUR_FORMULA_FK1 foreign key (
		ID_INSUR_BAREME)
	 references INSUR_BAREME (
		ID); 

-- Add foreign key constraints to table INSUR_BAREME.
alter table INSUR_BAREME
	add constraint INSUR_CT_INSUR_BAREME_FK1 foreign key (
		ID_INSUR_TYPE)
	 references INSUR_TYPE (
		ID); 

-- Add foreign key constraints to table INSUR_PEOPLE_NUMBER.
alter table INSUR_PEOPLE_NUMBER
	add constraint INSUR_CT_INSUR_PN_FK1 foreign key (
		ID_INSUR_TYPE)
	 references INSUR_TYPE (
		ID); 

-- Add foreign key constraints to table INSUR_TYPEOBJECT.
alter table INSUR_TYPEOBJECT
	add constraint INSUR_CT_INSURCTO_FK1 foreign key (
		ID_INSUR_TYPE)
	 references INSUR_TYPE (
		ID); 

-- Add foreign key constraints to table INSUR_TYPE_PROFESSION.
alter table INSUR_TYPE_PROFESSION
	add constraint INSUR_CT_INSUR_CT_PROF_FK1 foreign key (
		ID_INSUR_TYPE)
	 references INSUR_TYPE (
		ID); 

-- Add foreign key constraints to table INSUR_CONTRACT.
alter table INSUR_CONTRACT
	add constraint INSUR_CT_INS_CONTRACT_FK1 foreign key (
		ID_INSUR_TYPE)
	 references INSUR_TYPE (
		ID); 

-- Add foreign key constraints to table INSUR_TYPE.
alter table INSUR_TYPE
	add constraint INSUR_PRODUCT_INSUR_TYPE_FK1 foreign key (
		ID_INSUR_PRODUCT)
	 references INSUR_PRODUCT (
		ID); 

alter table INSUR_TYPE
	add constraint ED_INSUR_CREDITTYPE_ED_FK1 foreign key (
		ID_EXTERNALDISTRIBUTOR)
	 references EXTERNALDISTRIBUTOR (
		ID); 

-- Add foreign key constraints to table INSUR_PRODUCT_PRODUCT.
alter table INSUR_PRODUCT_PRODUCT
	add constraint IPRODUCT_PIP_FK1_ foreign key (
		ID_INSUR_PRODUCT)
	 references INSUR_PRODUCT (
		ID); 

alter table INSUR_PRODUCT_PRODUCT
	add constraint PRODUCT_PIP_FK1 foreign key (
		ID_INSUR_PRODUCT_GROUP)
	 references INSUR_PRODUCT_GROUP (
		ID); 

-- Add foreign key constraints to table INSUR_OBJECT_ED.
alter table INSUR_OBJECT_ED
	add constraint ED_INSURANCE_OBJECT_ED_FK1 foreign key (
		ID_EXTERNALDISTRIBUTOR)
	 references EXTERNALDISTRIBUTOR (
		ID); 

-- Add foreign key constraints to table AU_AUDIT.
alter table AU_AUDIT
	add constraint AU_AUDIT_TYPE_AU_AUDIT_FK1 foreign key (
		AUDIT_TYPE)
	 references AU_AUDIT_TYPE (
		ID); 

alter table AU_AUDIT
	add constraint AU_SUBSYS_TYPE_AU_AUDIT_FK1 foreign key (
		SUBSYS_TYPE)
	 references AU_SUBSYS_TYPE (
		ID); 

alter table AU_AUDIT
	add constraint AU_ACTION_TYPE_AU_AUDIT_FK1 foreign key (
		ACTION_TYPE)
	 references AU_ACTION_TYPE (
		ID); 

-- Add foreign key constraints to table DUEDAYS.
alter table DUEDAYS
	add constraint CREDITTYPE_DUEDAYS_FK1 foreign key (
		ID_CREDITTYPE)
	 references CREDITTYPE (
		ID); 

-- Add foreign key constraints to table CREDITTYPEBAREME.
alter table CREDITTYPEBAREME
	add constraint CREDITTYPE_CREDITTYPEBAREME foreign key (
		ID_CREDITTYPE)
	 references CREDITTYPE (
		ID); 

alter table CREDITTYPEBAREME
	add constraint BAREME_CREDITTYPEBAREME_FK1 foreign key (
		BAREME_CODE)
	 references BAREME (
		BAREME_CODE); 

-- Add foreign key constraints to table EXTERNALDISTRIBUTORDOCUMENT.
alter table EXTERNALDISTRIBUTORDOCUMENT
	add constraint ED_DUCUMENTXSL_FK1 foreign key (
		EXTERNALDISTRIBUTOR_ID)
	 references EXTERNALDISTRIBUTOR (
		ID); 

-- Add foreign key constraints to table LINKEDHIERARCHY.
alter table LINKEDHIERARCHY
	add constraint HIERARCHY_LINKEDHIERARCHY_FK1 foreign key (
		ID_HIERARCHY)
	 references HIERARCHY (
		ID); 

alter table LINKEDHIERARCHY
	add constraint ED_LINKEDHIERARCHY_FK1 foreign key (
		ID_EXTERNALDISTRIBUTOR)
	 references EXTERNALDISTRIBUTOR (
		ID); 

-- Add foreign key constraints to table CREDITTYPEEXTERNALDISTRIBUTOR.
alter table CREDITTYPEEXTERNALDISTRIBUTOR
	add constraint ED_CREDITTYPEED_FK1 foreign key (
		ID_EXTERNALDISTRIBUTOR)
	 references EXTERNALDISTRIBUTOR (
		ID); 

alter table CREDITTYPEEXTERNALDISTRIBUTOR
	add constraint CREDITTYPE_CREDITTYPEED_FK1 foreign key (
		ID_CREDITTYPE)
	 references CREDITTYPE (
		ID); 

-- Add foreign key constraints to table GOODPARTNERGOODLINK.
alter table GOODPARTNERGOODLINK
	add constraint GPCLASS_GPGLINK_FK1 foreign key (
		ID_GOODPARTNERCLASSIFICATION)
	 references GOODPARTNERCLASSIFICATION (
		ID); 

alter table GOODPARTNERGOODLINK
	add constraint GOODED_GOODPARTNERGOODLINK_FK1 foreign key (
		ID_GOODEXTERNALDISTRIBUTOR)
	 references GOODEXTERNALDISTRIBUTOR (
		ID); 

-- Add foreign key constraints to table GOODEXTERNALDISTRIBUTOR.
alter table GOODEXTERNALDISTRIBUTOR
	add constraint ED_GOODEXTERNALDISTRIBUTOR_FK1 foreign key (
		ID_EXTERNALDISTRIBUTOR)
	 references EXTERNALDISTRIBUTOR (
		ID); 

alter table GOODEXTERNALDISTRIBUTOR
	add constraint ED_GOODEXTERNALDISTRIBUTOR_FK2 foreign key (
		ID_ACCOUNTFINANCE)
	 references BANKACCOUNT (
		ID); 

alter table GOODEXTERNALDISTRIBUTOR
	add constraint ED_GOODEXTERNALDISTRIBUTOR_FK3 foreign key (
		ID_ACCOUNTCOMISSION)
	 references BANKACCOUNT (
		ID); 

-- Add foreign key constraints to table GOODPARTNERCLASSIFICATION.
alter table GOODPARTNERCLASSIFICATION
	add constraint ED_GPCLASSIFICATION_FK1 foreign key (
		ID_EXTERNALDISTRIBUTOR)
	 references EXTERNALDISTRIBUTOR (
		ID); 

-- Add foreign key constraints to table BANKACCOUNT.
alter table BANKACCOUNT
	add constraint ED_BANKACCOUNT_FK1 foreign key (
		ID_EXTERNALDISTRIBUTOR)
	 references EXTERNALDISTRIBUTOR (
		ID); 

-- Add foreign key constraints to table EMPLOYEE.
alter table EMPLOYEE
	add constraint ED_EMOPLOYEE_FK1 foreign key (
		ID_EXTERNAL_DISTRIBUTOR)
	 references EXTERNALDISTRIBUTOR (
		ID); 

-- Add foreign key constraints to table EXTERNALDISTRIBUTOR.
alter table EXTERNALDISTRIBUTOR
	add constraint ED_ED_FK1 foreign key (
		ID_EXTERNALDISTRIBUTORFINANCE)
	 references EXTERNALDISTRIBUTOR (
		ID); 

alter table EXTERNALDISTRIBUTOR
	add constraint BALANCEUNIT_ED_FK1 foreign key (
		ID_BALANCEUNIT)
	 references BALANCEUNIT (
		ID); 

alter table EXTERNALDISTRIBUTOR
	add constraint BAREME_EXTERNALDISTRIBUTOR_FK1 foreign key (
		BAREME_CODE)
	 references BAREME (
		BAREME_CODE); 

alter table EXTERNALDISTRIBUTOR
	add constraint ED_ED_FK2 foreign key (
		ID_EXTERNALDISTRIBUTORCOMISION)
	 references EXTERNALDISTRIBUTOR (
		ID); 

-- Add foreign key constraints to table RECEIVERCOMMISSION.
alter table RECEIVERCOMMISSION
	add constraint ED_RECEIVERCOMMISSION_FK1 foreign key (
		ID_EXTERNALDISTRIBUTOR)
	 references EXTERNALDISTRIBUTOR (
		ID); 

-- Add foreign key constraints to table COMMISSIONSCALE.
alter table COMMISSIONSCALE
	add constraint COMMISSION_COMMISSIONSCALE_FK1 foreign key (
		ID_COMMISSION)
	 references COMMISSION (
		ID); 

-- Add foreign key constraints to table BAREME.
alter table BAREME
	add constraint BAREME_COMMISSION_FK1 foreign key (
		ID_COMMISSION)
	 references COMMISSION (
		ID); 

-- Add foreign key constraints to table CREDITTYPEACTIONCODE.
alter table CREDITTYPEACTIONCODE
	add constraint CT_CTBC_FK1 foreign key (
		ID_CREDITTYPE)
	 references CREDITTYPE (
		ID); 

-- Add foreign key constraints to table CREDITTYPEGOOD.
alter table CREDITTYPEGOOD
	add constraint CREDITTYPE_CREDITTYPEGOOD_FK1 foreign key (
		ID_CREDITTYPE)
	 references CREDITTYPE (
		ID); 

-- Add foreign key constraints to table CREDITTYPEPROFESSION.
alter table CREDITTYPEPROFESSION
	add constraint CT_CTP_FK1 foreign key (
		ID_CREDITTYPE)
	 references CREDITTYPE (
		ID); 

-- Add foreign key constraints to table CREDITTYPEMANDATORYDOCUMENTLNK.
alter table CREDITTYPEMANDATORYDOCUMENTLNK
	add constraint CREDITTYPE_CTMDLNK_FK1 foreign key (
		ID_CREDITTYPE)
	 references CREDITTYPE (
		ID); 

-- Add foreign key constraints to table CREDITTYPE.
alter table CREDITTYPE
	add constraint PRODUCT_CREDITTYPE_FK1 foreign key (
		ID_PRODUCT)
	 references PRODUCT (
		ID); 

alter table CREDITTYPE
	add constraint CT_INS_CT_CT_FK1 foreign key (
		ID_INSUR_GROUP)
	 references INSUR_GROUP (
		ID); 

-- Add foreign key constraints to table PRODUCT.
alter table PRODUCT
	add constraint INSUR_PRODUCT_GP_FK1 foreign key (
		ID_INSUR_PRODUCT_GROUP)
	 references INSUR_PRODUCT_GROUP (
		ID); 

-- Add foreign key constraints to table USEREXTERNALDISTRIBUTORLINK.
alter table USEREXTERNALDISTRIBUTORLINK
	add constraint ED_USEREDLINK_FK1 foreign key (
		ID_EXTERNALDISTRIBUTOR)
	 references EXTERNALDISTRIBUTOR (
		ID); 

alter table USEREXTERNALDISTRIBUTORLINK
	add constraint USER_USEREXTERNALDISTLINK_FK1 foreign key (
		ID_USER)
	 references "USER" (
		ID); 

-- Add foreign key constraints to table USERROLELINK.
alter table USERROLELINK
	add constraint USER_USERROLELINK_FK1 foreign key (
		ID_USER)
	 references "USER" (
		ID); 

alter table USERROLELINK
	add constraint ROLE_USERROLELINK_FK1 foreign key (
		ID_ROLE)
	 references ROLE (
		ID); 

-- Add foreign key constraints to table USERRIGHT.
alter table USERRIGHT
	add constraint RIGHT_USERRIGHT_FK1 foreign key (
		ID_RIGHT)
	 references "RIGHT" (
		ID); 

alter table USERRIGHT
	add constraint ROLE_USERRIGHT_FK1 foreign key (
		ID_ROLE)
	 references ROLE (
		ID); 

-- Add foreign key constraints to table USERPROPERTY.
alter table USERPROPERTY
	add constraint USER_USERPROPERTY_FK1 foreign key (
		USER_ID)
	 references "USER" (
		ID); 

-- Add foreign key constraints to table USER_LASTPWD_LIST.
alter table USER_LASTPWD_LIST
	add constraint USER_USER_LASTPWD_LIST_FK1 foreign key (
		USER_ID)
	 references "USER" (
		ID); 

-- This is the end of the Microsoft Visual Studio generated SQL DDL script.
