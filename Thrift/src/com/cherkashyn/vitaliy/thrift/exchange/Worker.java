/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cherkashyn.vitaliy.thrift.exchange;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Worker implements org.apache.thrift.TBase<Worker, Worker._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Worker");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("name_first", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("name_second", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField POSITION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("position_list", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField HOME_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("home_address", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField WORK_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("work_address", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkerTupleSchemeFactory());
  }

  public int id; // required
  public String name_first; // required
  public String name_second; // required
  public String phone; // optional
  public List<Position> position_list; // optional
  public Address home_address; // optional
  public Address work_address; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME_FIRST((short)2, "name_first"),
    NAME_SECOND((short)3, "name_second"),
    PHONE((short)4, "phone"),
    POSITION_LIST((short)5, "position_list"),
    HOME_ADDRESS((short)6, "home_address"),
    WORK_ADDRESS((short)7, "work_address");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME_FIRST
          return NAME_FIRST;
        case 3: // NAME_SECOND
          return NAME_SECOND;
        case 4: // PHONE
          return PHONE;
        case 5: // POSITION_LIST
          return POSITION_LIST;
        case 6: // HOME_ADDRESS
          return HOME_ADDRESS;
        case 7: // WORK_ADDRESS
          return WORK_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  private _Fields optionals[] = {_Fields.PHONE,_Fields.POSITION_LIST,_Fields.HOME_ADDRESS,_Fields.WORK_ADDRESS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME_FIRST, new org.apache.thrift.meta_data.FieldMetaData("name_first", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_SECOND, new org.apache.thrift.meta_data.FieldMetaData("name_second", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION_LIST, new org.apache.thrift.meta_data.FieldMetaData("position_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "PositionList")));
    tmpMap.put(_Fields.HOME_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("home_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Address.class)));
    tmpMap.put(_Fields.WORK_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("work_address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Address.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Worker.class, metaDataMap);
  }

  public Worker() {
  }

  public Worker(
    int id,
    String name_first,
    String name_second)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.name_first = name_first;
    this.name_second = name_second;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Worker(Worker other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetName_first()) {
      this.name_first = other.name_first;
    }
    if (other.isSetName_second()) {
      this.name_second = other.name_second;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetPosition_list()) {
      this.position_list = other.position_list;
    }
    if (other.isSetHome_address()) {
      this.home_address = new Address(other.home_address);
    }
    if (other.isSetWork_address()) {
      this.work_address = new Address(other.work_address);
    }
  }

  public Worker deepCopy() {
    return new Worker(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name_first = null;
    this.name_second = null;
    this.phone = null;
    this.position_list = null;
    this.home_address = null;
    this.work_address = null;
  }

  public int getId() {
    return this.id;
  }

  public Worker setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getName_first() {
    return this.name_first;
  }

  public Worker setName_first(String name_first) {
    this.name_first = name_first;
    return this;
  }

  public void unsetName_first() {
    this.name_first = null;
  }

  /** Returns true if field name_first is set (has been assigned a value) and false otherwise */
  public boolean isSetName_first() {
    return this.name_first != null;
  }

  public void setName_firstIsSet(boolean value) {
    if (!value) {
      this.name_first = null;
    }
  }

  public String getName_second() {
    return this.name_second;
  }

  public Worker setName_second(String name_second) {
    this.name_second = name_second;
    return this;
  }

  public void unsetName_second() {
    this.name_second = null;
  }

  /** Returns true if field name_second is set (has been assigned a value) and false otherwise */
  public boolean isSetName_second() {
    return this.name_second != null;
  }

  public void setName_secondIsSet(boolean value) {
    if (!value) {
      this.name_second = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public Worker setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public int getPosition_listSize() {
    return (this.position_list == null) ? 0 : this.position_list.size();
  }

  public java.util.Iterator<Position> getPosition_listIterator() {
    return (this.position_list == null) ? null : this.position_list.iterator();
  }

  public void addToPosition_list(Position elem) {
    if (this.position_list == null) {
      this.position_list = new ArrayList<Position>();
    }
    this.position_list.add(elem);
  }

  public List<Position> getPosition_list() {
    return this.position_list;
  }

  public Worker setPosition_list(List<Position> position_list) {
    this.position_list = position_list;
    return this;
  }

  public void unsetPosition_list() {
    this.position_list = null;
  }

  /** Returns true if field position_list is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition_list() {
    return this.position_list != null;
  }

  public void setPosition_listIsSet(boolean value) {
    if (!value) {
      this.position_list = null;
    }
  }

  public Address getHome_address() {
    return this.home_address;
  }

  public Worker setHome_address(Address home_address) {
    this.home_address = home_address;
    return this;
  }

  public void unsetHome_address() {
    this.home_address = null;
  }

  /** Returns true if field home_address is set (has been assigned a value) and false otherwise */
  public boolean isSetHome_address() {
    return this.home_address != null;
  }

  public void setHome_addressIsSet(boolean value) {
    if (!value) {
      this.home_address = null;
    }
  }

  public Address getWork_address() {
    return this.work_address;
  }

  public Worker setWork_address(Address work_address) {
    this.work_address = work_address;
    return this;
  }

  public void unsetWork_address() {
    this.work_address = null;
  }

  /** Returns true if field work_address is set (has been assigned a value) and false otherwise */
  public boolean isSetWork_address() {
    return this.work_address != null;
  }

  public void setWork_addressIsSet(boolean value) {
    if (!value) {
      this.work_address = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME_FIRST:
      if (value == null) {
        unsetName_first();
      } else {
        setName_first((String)value);
      }
      break;

    case NAME_SECOND:
      if (value == null) {
        unsetName_second();
      } else {
        setName_second((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case POSITION_LIST:
      if (value == null) {
        unsetPosition_list();
      } else {
        setPosition_list((List<Position>)value);
      }
      break;

    case HOME_ADDRESS:
      if (value == null) {
        unsetHome_address();
      } else {
        setHome_address((Address)value);
      }
      break;

    case WORK_ADDRESS:
      if (value == null) {
        unsetWork_address();
      } else {
        setWork_address((Address)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NAME_FIRST:
      return getName_first();

    case NAME_SECOND:
      return getName_second();

    case PHONE:
      return getPhone();

    case POSITION_LIST:
      return getPosition_list();

    case HOME_ADDRESS:
      return getHome_address();

    case WORK_ADDRESS:
      return getWork_address();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME_FIRST:
      return isSetName_first();
    case NAME_SECOND:
      return isSetName_second();
    case PHONE:
      return isSetPhone();
    case POSITION_LIST:
      return isSetPosition_list();
    case HOME_ADDRESS:
      return isSetHome_address();
    case WORK_ADDRESS:
      return isSetWork_address();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Worker)
      return this.equals((Worker)that);
    return false;
  }

  public boolean equals(Worker that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name_first = true && this.isSetName_first();
    boolean that_present_name_first = true && that.isSetName_first();
    if (this_present_name_first || that_present_name_first) {
      if (!(this_present_name_first && that_present_name_first))
        return false;
      if (!this.name_first.equals(that.name_first))
        return false;
    }

    boolean this_present_name_second = true && this.isSetName_second();
    boolean that_present_name_second = true && that.isSetName_second();
    if (this_present_name_second || that_present_name_second) {
      if (!(this_present_name_second && that_present_name_second))
        return false;
      if (!this.name_second.equals(that.name_second))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_position_list = true && this.isSetPosition_list();
    boolean that_present_position_list = true && that.isSetPosition_list();
    if (this_present_position_list || that_present_position_list) {
      if (!(this_present_position_list && that_present_position_list))
        return false;
      if (!this.position_list.equals(that.position_list))
        return false;
    }

    boolean this_present_home_address = true && this.isSetHome_address();
    boolean that_present_home_address = true && that.isSetHome_address();
    if (this_present_home_address || that_present_home_address) {
      if (!(this_present_home_address && that_present_home_address))
        return false;
      if (!this.home_address.equals(that.home_address))
        return false;
    }

    boolean this_present_work_address = true && this.isSetWork_address();
    boolean that_present_work_address = true && that.isSetWork_address();
    if (this_present_work_address || that_present_work_address) {
      if (!(this_present_work_address && that_present_work_address))
        return false;
      if (!this.work_address.equals(that.work_address))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Worker other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Worker typedOther = (Worker)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName_first()).compareTo(typedOther.isSetName_first());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName_first()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name_first, typedOther.name_first);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName_second()).compareTo(typedOther.isSetName_second());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName_second()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name_second, typedOther.name_second);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(typedOther.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, typedOther.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition_list()).compareTo(typedOther.isSetPosition_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position_list, typedOther.position_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHome_address()).compareTo(typedOther.isSetHome_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHome_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.home_address, typedOther.home_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWork_address()).compareTo(typedOther.isSetWork_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWork_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.work_address, typedOther.work_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Worker(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name_first:");
    if (this.name_first == null) {
      sb.append("null");
    } else {
      sb.append(this.name_first);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name_second:");
    if (this.name_second == null) {
      sb.append("null");
    } else {
      sb.append(this.name_second);
    }
    first = false;
    if (isSetPhone()) {
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
    }
    if (isSetPosition_list()) {
      if (!first) sb.append(", ");
      sb.append("position_list:");
      if (this.position_list == null) {
        sb.append("null");
      } else {
        sb.append(this.position_list);
      }
      first = false;
    }
    if (isSetHome_address()) {
      if (!first) sb.append(", ");
      sb.append("home_address:");
      if (this.home_address == null) {
        sb.append("null");
      } else {
        sb.append(this.home_address);
      }
      first = false;
    }
    if (isSetWork_address()) {
      if (!first) sb.append(", ");
      sb.append("work_address:");
      if (this.work_address == null) {
        sb.append("null");
      } else {
        sb.append(this.work_address);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (name_first == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name_first' was not present! Struct: " + toString());
    }
    if (name_second == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name_second' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkerStandardSchemeFactory implements SchemeFactory {
    public WorkerStandardScheme getScheme() {
      return new WorkerStandardScheme();
    }
  }

  private static class WorkerStandardScheme extends StandardScheme<Worker> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Worker struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME_FIRST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name_first = iprot.readString();
              struct.setName_firstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME_SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name_second = iprot.readString();
              struct.setName_secondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POSITION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.position_list = new ArrayList<Position>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Position _elem2; // required
                  _elem2 = new Position();
                  _elem2.read(iprot);
                  struct.position_list.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPosition_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HOME_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.home_address = new Address();
              struct.home_address.read(iprot);
              struct.setHome_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WORK_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.work_address = new Address();
              struct.work_address.read(iprot);
              struct.setWork_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Worker struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.name_first != null) {
        oprot.writeFieldBegin(NAME_FIRST_FIELD_DESC);
        oprot.writeString(struct.name_first);
        oprot.writeFieldEnd();
      }
      if (struct.name_second != null) {
        oprot.writeFieldBegin(NAME_SECOND_FIELD_DESC);
        oprot.writeString(struct.name_second);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        if (struct.isSetPhone()) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.position_list != null) {
        if (struct.isSetPosition_list()) {
          oprot.writeFieldBegin(POSITION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.position_list.size()));
            for (Position _iter3 : struct.position_list)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.home_address != null) {
        if (struct.isSetHome_address()) {
          oprot.writeFieldBegin(HOME_ADDRESS_FIELD_DESC);
          struct.home_address.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.work_address != null) {
        if (struct.isSetWork_address()) {
          oprot.writeFieldBegin(WORK_ADDRESS_FIELD_DESC);
          struct.work_address.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkerTupleSchemeFactory implements SchemeFactory {
    public WorkerTupleScheme getScheme() {
      return new WorkerTupleScheme();
    }
  }

  private static class WorkerTupleScheme extends TupleScheme<Worker> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Worker struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeString(struct.name_first);
      oprot.writeString(struct.name_second);
      BitSet optionals = new BitSet();
      if (struct.isSetPhone()) {
        optionals.set(0);
      }
      if (struct.isSetPosition_list()) {
        optionals.set(1);
      }
      if (struct.isSetHome_address()) {
        optionals.set(2);
      }
      if (struct.isSetWork_address()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetPosition_list()) {
        {
          oprot.writeI32(struct.position_list.size());
          for (Position _iter4 : struct.position_list)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetHome_address()) {
        struct.home_address.write(oprot);
      }
      if (struct.isSetWork_address()) {
        struct.work_address.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Worker struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.name_first = iprot.readString();
      struct.setName_firstIsSet(true);
      struct.name_second = iprot.readString();
      struct.setName_secondIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.position_list = new ArrayList<Position>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            Position _elem7; // required
            _elem7 = new Position();
            _elem7.read(iprot);
            struct.position_list.add(_elem7);
          }
        }
        struct.setPosition_listIsSet(true);
      }
      if (incoming.get(2)) {
        struct.home_address = new Address();
        struct.home_address.read(iprot);
        struct.setHome_addressIsSet(true);
      }
      if (incoming.get(3)) {
        struct.work_address = new Address();
        struct.work_address.read(iprot);
        struct.setWork_addressIsSet(true);
      }
    }
  }

}

