/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cherkashyn.vitaliy.thrift.exchange;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Address implements org.apache.thrift.TBase<Address, Address._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Address");

  private static final org.apache.thrift.protocol.TField POST_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("post_index", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STREET_FIELD_DESC = new org.apache.thrift.protocol.TField("street", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField B_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("b_number", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField B_NUMBER_ADD_FIELD_DESC = new org.apache.thrift.protocol.TField("b_number_add", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FLAT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("flat_number", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AddressStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AddressTupleSchemeFactory());
  }

  public int post_index; // required
  public String city; // required
  public String street; // required
  public int b_number; // required
  public String b_number_add; // optional
  public int flat_number; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POST_INDEX((short)1, "post_index"),
    CITY((short)2, "city"),
    STREET((short)3, "street"),
    B_NUMBER((short)4, "b_number"),
    B_NUMBER_ADD((short)5, "b_number_add"),
    FLAT_NUMBER((short)6, "flat_number");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POST_INDEX
          return POST_INDEX;
        case 2: // CITY
          return CITY;
        case 3: // STREET
          return STREET;
        case 4: // B_NUMBER
          return B_NUMBER;
        case 5: // B_NUMBER_ADD
          return B_NUMBER_ADD;
        case 6: // FLAT_NUMBER
          return FLAT_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POST_INDEX_ISSET_ID = 0;
  private static final int __B_NUMBER_ISSET_ID = 1;
  private static final int __FLAT_NUMBER_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  private _Fields optionals[] = {_Fields.B_NUMBER_ADD,_Fields.FLAT_NUMBER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POST_INDEX, new org.apache.thrift.meta_data.FieldMetaData("post_index", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREET, new org.apache.thrift.meta_data.FieldMetaData("street", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.B_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("b_number", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.B_NUMBER_ADD, new org.apache.thrift.meta_data.FieldMetaData("b_number_add", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("flat_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Address.class, metaDataMap);
  }

  public Address() {
  }

  public Address(
    int post_index,
    String city,
    String street,
    int b_number)
  {
    this();
    this.post_index = post_index;
    setPost_indexIsSet(true);
    this.city = city;
    this.street = street;
    this.b_number = b_number;
    setB_numberIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Address(Address other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.post_index = other.post_index;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetStreet()) {
      this.street = other.street;
    }
    this.b_number = other.b_number;
    if (other.isSetB_number_add()) {
      this.b_number_add = other.b_number_add;
    }
    this.flat_number = other.flat_number;
  }

  public Address deepCopy() {
    return new Address(this);
  }

  @Override
  public void clear() {
    setPost_indexIsSet(false);
    this.post_index = 0;
    this.city = null;
    this.street = null;
    setB_numberIsSet(false);
    this.b_number = 0;
    this.b_number_add = null;
    setFlat_numberIsSet(false);
    this.flat_number = 0;
  }

  public int getPost_index() {
    return this.post_index;
  }

  public Address setPost_index(int post_index) {
    this.post_index = post_index;
    setPost_indexIsSet(true);
    return this;
  }

  public void unsetPost_index() {
    __isset_bit_vector.clear(__POST_INDEX_ISSET_ID);
  }

  /** Returns true if field post_index is set (has been assigned a value) and false otherwise */
  public boolean isSetPost_index() {
    return __isset_bit_vector.get(__POST_INDEX_ISSET_ID);
  }

  public void setPost_indexIsSet(boolean value) {
    __isset_bit_vector.set(__POST_INDEX_ISSET_ID, value);
  }

  public String getCity() {
    return this.city;
  }

  public Address setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getStreet() {
    return this.street;
  }

  public Address setStreet(String street) {
    this.street = street;
    return this;
  }

  public void unsetStreet() {
    this.street = null;
  }

  /** Returns true if field street is set (has been assigned a value) and false otherwise */
  public boolean isSetStreet() {
    return this.street != null;
  }

  public void setStreetIsSet(boolean value) {
    if (!value) {
      this.street = null;
    }
  }

  public int getB_number() {
    return this.b_number;
  }

  public Address setB_number(int b_number) {
    this.b_number = b_number;
    setB_numberIsSet(true);
    return this;
  }

  public void unsetB_number() {
    __isset_bit_vector.clear(__B_NUMBER_ISSET_ID);
  }

  /** Returns true if field b_number is set (has been assigned a value) and false otherwise */
  public boolean isSetB_number() {
    return __isset_bit_vector.get(__B_NUMBER_ISSET_ID);
  }

  public void setB_numberIsSet(boolean value) {
    __isset_bit_vector.set(__B_NUMBER_ISSET_ID, value);
  }

  public String getB_number_add() {
    return this.b_number_add;
  }

  public Address setB_number_add(String b_number_add) {
    this.b_number_add = b_number_add;
    return this;
  }

  public void unsetB_number_add() {
    this.b_number_add = null;
  }

  /** Returns true if field b_number_add is set (has been assigned a value) and false otherwise */
  public boolean isSetB_number_add() {
    return this.b_number_add != null;
  }

  public void setB_number_addIsSet(boolean value) {
    if (!value) {
      this.b_number_add = null;
    }
  }

  public int getFlat_number() {
    return this.flat_number;
  }

  public Address setFlat_number(int flat_number) {
    this.flat_number = flat_number;
    setFlat_numberIsSet(true);
    return this;
  }

  public void unsetFlat_number() {
    __isset_bit_vector.clear(__FLAT_NUMBER_ISSET_ID);
  }

  /** Returns true if field flat_number is set (has been assigned a value) and false otherwise */
  public boolean isSetFlat_number() {
    return __isset_bit_vector.get(__FLAT_NUMBER_ISSET_ID);
  }

  public void setFlat_numberIsSet(boolean value) {
    __isset_bit_vector.set(__FLAT_NUMBER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POST_INDEX:
      if (value == null) {
        unsetPost_index();
      } else {
        setPost_index((Integer)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case STREET:
      if (value == null) {
        unsetStreet();
      } else {
        setStreet((String)value);
      }
      break;

    case B_NUMBER:
      if (value == null) {
        unsetB_number();
      } else {
        setB_number((Integer)value);
      }
      break;

    case B_NUMBER_ADD:
      if (value == null) {
        unsetB_number_add();
      } else {
        setB_number_add((String)value);
      }
      break;

    case FLAT_NUMBER:
      if (value == null) {
        unsetFlat_number();
      } else {
        setFlat_number((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POST_INDEX:
      return Integer.valueOf(getPost_index());

    case CITY:
      return getCity();

    case STREET:
      return getStreet();

    case B_NUMBER:
      return Integer.valueOf(getB_number());

    case B_NUMBER_ADD:
      return getB_number_add();

    case FLAT_NUMBER:
      return Integer.valueOf(getFlat_number());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POST_INDEX:
      return isSetPost_index();
    case CITY:
      return isSetCity();
    case STREET:
      return isSetStreet();
    case B_NUMBER:
      return isSetB_number();
    case B_NUMBER_ADD:
      return isSetB_number_add();
    case FLAT_NUMBER:
      return isSetFlat_number();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Address)
      return this.equals((Address)that);
    return false;
  }

  public boolean equals(Address that) {
    if (that == null)
      return false;

    boolean this_present_post_index = true;
    boolean that_present_post_index = true;
    if (this_present_post_index || that_present_post_index) {
      if (!(this_present_post_index && that_present_post_index))
        return false;
      if (this.post_index != that.post_index)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_street = true && this.isSetStreet();
    boolean that_present_street = true && that.isSetStreet();
    if (this_present_street || that_present_street) {
      if (!(this_present_street && that_present_street))
        return false;
      if (!this.street.equals(that.street))
        return false;
    }

    boolean this_present_b_number = true;
    boolean that_present_b_number = true;
    if (this_present_b_number || that_present_b_number) {
      if (!(this_present_b_number && that_present_b_number))
        return false;
      if (this.b_number != that.b_number)
        return false;
    }

    boolean this_present_b_number_add = true && this.isSetB_number_add();
    boolean that_present_b_number_add = true && that.isSetB_number_add();
    if (this_present_b_number_add || that_present_b_number_add) {
      if (!(this_present_b_number_add && that_present_b_number_add))
        return false;
      if (!this.b_number_add.equals(that.b_number_add))
        return false;
    }

    boolean this_present_flat_number = true && this.isSetFlat_number();
    boolean that_present_flat_number = true && that.isSetFlat_number();
    if (this_present_flat_number || that_present_flat_number) {
      if (!(this_present_flat_number && that_present_flat_number))
        return false;
      if (this.flat_number != that.flat_number)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Address other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Address typedOther = (Address)other;

    lastComparison = Boolean.valueOf(isSetPost_index()).compareTo(typedOther.isSetPost_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPost_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.post_index, typedOther.post_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(typedOther.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, typedOther.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStreet()).compareTo(typedOther.isSetStreet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.street, typedOther.street);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB_number()).compareTo(typedOther.isSetB_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b_number, typedOther.b_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB_number_add()).compareTo(typedOther.isSetB_number_add());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB_number_add()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b_number_add, typedOther.b_number_add);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlat_number()).compareTo(typedOther.isSetFlat_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlat_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flat_number, typedOther.flat_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Address(");
    boolean first = true;

    sb.append("post_index:");
    sb.append(this.post_index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("street:");
    if (this.street == null) {
      sb.append("null");
    } else {
      sb.append(this.street);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b_number:");
    sb.append(this.b_number);
    first = false;
    if (isSetB_number_add()) {
      if (!first) sb.append(", ");
      sb.append("b_number_add:");
      if (this.b_number_add == null) {
        sb.append("null");
      } else {
        sb.append(this.b_number_add);
      }
      first = false;
    }
    if (isSetFlat_number()) {
      if (!first) sb.append(", ");
      sb.append("flat_number:");
      sb.append(this.flat_number);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'post_index' because it's a primitive and you chose the non-beans generator.
    if (city == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'city' was not present! Struct: " + toString());
    }
    if (street == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'street' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'b_number' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddressStandardSchemeFactory implements SchemeFactory {
    public AddressStandardScheme getScheme() {
      return new AddressStandardScheme();
    }
  }

  private static class AddressStandardScheme extends StandardScheme<Address> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Address struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // POST_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.post_index = iprot.readI32();
              struct.setPost_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STREET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.street = iprot.readString();
              struct.setStreetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // B_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.b_number = iprot.readI32();
              struct.setB_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // B_NUMBER_ADD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.b_number_add = iprot.readString();
              struct.setB_number_addIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FLAT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.flat_number = iprot.readI32();
              struct.setFlat_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPost_index()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'post_index' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetB_number()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'b_number' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Address struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(POST_INDEX_FIELD_DESC);
      oprot.writeI32(struct.post_index);
      oprot.writeFieldEnd();
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.street != null) {
        oprot.writeFieldBegin(STREET_FIELD_DESC);
        oprot.writeString(struct.street);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(B_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.b_number);
      oprot.writeFieldEnd();
      if (struct.b_number_add != null) {
        if (struct.isSetB_number_add()) {
          oprot.writeFieldBegin(B_NUMBER_ADD_FIELD_DESC);
          oprot.writeString(struct.b_number_add);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFlat_number()) {
        oprot.writeFieldBegin(FLAT_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.flat_number);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AddressTupleSchemeFactory implements SchemeFactory {
    public AddressTupleScheme getScheme() {
      return new AddressTupleScheme();
    }
  }

  private static class AddressTupleScheme extends TupleScheme<Address> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Address struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.post_index);
      oprot.writeString(struct.city);
      oprot.writeString(struct.street);
      oprot.writeI32(struct.b_number);
      BitSet optionals = new BitSet();
      if (struct.isSetB_number_add()) {
        optionals.set(0);
      }
      if (struct.isSetFlat_number()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetB_number_add()) {
        oprot.writeString(struct.b_number_add);
      }
      if (struct.isSetFlat_number()) {
        oprot.writeI32(struct.flat_number);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Address struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.post_index = iprot.readI32();
      struct.setPost_indexIsSet(true);
      struct.city = iprot.readString();
      struct.setCityIsSet(true);
      struct.street = iprot.readString();
      struct.setStreetIsSet(true);
      struct.b_number = iprot.readI32();
      struct.setB_numberIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.b_number_add = iprot.readString();
        struct.setB_number_addIsSet(true);
      }
      if (incoming.get(1)) {
        struct.flat_number = iprot.readI32();
        struct.setFlat_numberIsSet(true);
      }
    }
  }

}

