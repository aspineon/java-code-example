import org.apache.commons.lang3.StringUtils;
import org.eclipse.jgit.api.*;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.api.errors.InvalidRefNameException;
import org.eclipse.jgit.lib.TextProgressMonitor;
import org.eclipse.jgit.merge.MergeStrategy;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) throws GitAPIException, IOException {
        String path = "/home/technik/temp/my_repo";
        String login = "root123";
        String password = "root123";

        // Git git = GitUtils.cloneRepo("http://localhost:3000/root123/test.git", path, login, password, "master");
        Git git = GitUtils.openRepo(path);


        GitUtils.checkout(git, "v5-car978");
        GitUtils.pull(git, login, password);
    }

}

class GitUtils{
    public static Git cloneRepo(String repositoryUrl, String gitLocalRepositoryPath, String login, String password, String branch) throws GitAPIException {
        String branchRef = "refs/heads/" + branch;

        CloneCommand cloneCommand = Git.cloneRepository()
                .setURI(repositoryUrl)
                .setDirectory(new File(gitLocalRepositoryPath))
                .setProgressMonitor(new TextProgressMonitor(new PrintWriter(System.out)))
                .setBranchesToClone(Arrays.asList(branchRef))
                .setBranch(branchRef)
                .setCloneAllBranches(false);

        return setCredentials(cloneCommand, login, password).call();
    }

     private static <T extends TransportCommand> T  setCredentials(T command, String login, String password){
        command.setCredentialsProvider(new UsernamePasswordCredentialsProvider(login, password));
        return command;
    }


    public static Git openRepo(String path) throws IOException {
        return Git.open(new File(path));
    }

    private final static String PREFIX = "remotes/origin/";

    public static void checkoutNewBranch(Git git, String name) throws GitAPIException {
        git.checkout()
                .setUpstreamMode(CreateBranchCommand.SetupUpstreamMode.TRACK)
                .setCreateBranch(true)
                // .setStartPoint("origin")
                .setName(name)
                .call();
    }

    public static void checkoutBranch(Git git, String name) throws GitAPIException {
        git.checkout()
                // .setUpstreamMode(CreateBranchCommand.SetupUpstreamMode.TRACK)
                // .setCreateBranch(true)
                // .setStartPoint("origin")
                .setName(name)
                .call();
    }

    public static void pull(Git git, String login, String password) throws GitAPIException {
        setCredentials(git.pull(), login, password)
                .setStrategy(MergeStrategy.OURS)
                .setFastForward(MergeCommand.FastForwardMode.FF)
                .call();
    }

    public static List<String> getLocalBranches(Git git) throws GitAPIException {
        return git.branchList().setListMode(ListBranchCommand.ListMode.ALL)
                .call()
                .stream()
                .map(x->x.getName())
                .filter(x->x.startsWith("refs/heads/"))
                .map(x-> StringUtils.substringAfter(x, "refs/heads/"))
        .collect(Collectors.toList());
    }

    public static List<String> getRemoteBranches(Git git) throws GitAPIException {
        git.fetch().call();
        return git.branchList().setListMode(ListBranchCommand.ListMode.ALL)
                .call()
                .stream()
                .map(x->x.getName())
                .filter(x->x.startsWith("refs/remotes/origin/"))
                .map(x-> StringUtils.substringAfter(x, "refs/remotes/origin/"))
                .collect(Collectors.toList());
    }


    /**
     * checkout to branch by name, if locally it doesn't exist - track it
     * @param git
     * @param branchName
     * @throws GitAPIException
     */
    public static void checkout(Git git, String branchName) throws GitAPIException {
        if(GitUtils.getLocalBranches(git).stream().filter(x->x.equals(branchName)).findFirst().isPresent()){
            GitUtils.checkoutBranch(git, branchName);
        }else{
            if(GitUtils.getRemoteBranches(git).stream().filter(x->x.equals(branchName)).findFirst().isPresent()){
                GitUtils.checkoutNewBranch(git, branchName);
            }else{
                throw new InvalidRefNameException(branchName);
            }
        }
    }
}
